{"version":3,"sources":["serviceWorker.ts","actions/globals/types.ts","actions/globals/index.ts","components/Header/AlgorithmToggle.tsx","components/Header/ArrayTypes.tsx","components/Header/SizeSlider.tsx","components/Header/AnimationSlider.tsx","components/Header/Sort.tsx","components/Header/index.tsx","commonUtilities.ts","algorithms/BubbleSort.ts","algorithms/SelectionSort.ts","components/Helper.ts","components/ArrayBlocks/index.tsx","hooks/useWindowSize.ts","App.tsx","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","sortAlgorithm","sort","type","AlgorithmToggle","algorithms","useRef","minifiedName","name","defaultAlgorithm","useSelector","state","globals","algorithm","isSorting","dispatch","useDispatch","key","className","current","map","algo","title","onClick","ArrayTypes","arrayType","value","onChange","e","changeArrayType","currentTarget","SizeSlider","arraySize","max","min","style","cursor","changeArraySize","parseInt","AnimationSlider","animationSpeed","changeAnimationSpeed","SortButton","Header","timer","ms","Promise","res","setTimeout","swapSVGNodes","svgChildren1","svgChildren2","parentNode","firstChild","secondChild","nextSibling","insertBefore","first","transform","baseVal","getItem","firstX","firstY","SVGTransform","SVG_TRANSFORM_TRANSLATE","matrix","f","second","secondX","secondY","setTranslate","arr","svgChildren","func","a","then","catch","err","i","len","j","rect1","children","rect2","firstRect","secondRect","fill","length","minRect","minIndex","currentRect","getRandomInt","mi","Math","ceil","ma","floor","random","ArrayBlocks","useState","arrayElements","setArrayElements","divisor","minElements","minRange","maxRange","remainingHeightWidth","setRemainingHeightWidth","getRandomArrayElements","array","size","push","arrayTypes","Decreasing","b","Increasing","Randomize","useEffect","paddingLeftRight","paddingTopBottom","height","width","eachElementWidth","innerWidth","innerHeight","setSize","onResize","addEventListener","removeEventListener","useWindowSize","header","document","querySelector","offsetHeight","body","svgRef","BubbleSort","ele","SelectionSort","ref","paddingBottom","paddingLeft","paddingRight","paddingTop","xmlns","eachElement","index","eachElementHeight","stroke","strokeOpacity","strokeWidth","App","initialState","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"0OAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBhC,ICkCMC,EAAgB,SAACC,GAAD,MAAuC,CAChEA,OACAC,KDhC0B,mBECjBC,EAAqC,WAC9C,IAAMC,EAAaC,iBAAO,CACtB,CACIC,aAAc,MACdC,KAAM,eAEV,CACID,aAAc,MACdC,KAAM,kBAEV,CACID,aAAc,MACdC,KAAM,kBAEV,CACID,aAAc,MACdC,KAAM,cAEV,CACID,aAAc,MACdC,KAAM,gBAIRC,EAAmBC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQC,aACnEC,EAAYJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQV,QAE5Da,EAAWC,cAEjB,OACI,yBACIC,IAAKR,EACLS,UAAWJ,EAAY,8BAAgC,sBAEtDT,EAAWc,QAAQC,KAAI,SAACC,GAAD,OACpBZ,IAAqBY,EAAKb,KACtB,yBAAKS,IAAKI,EAAKb,KAAMU,UAAU,WAAWI,MAAOD,EAAKb,MACjDa,EAAKb,MAGV,yBACIS,IAAKI,EAAKb,KACVc,MAAOD,EAAKb,KACZe,QAAS,kBAAMR,EDlC2C,CAC9EF,UCiCmEQ,EAAKb,KDhCxEL,KDhBoC,+BEkDfkB,EAAKd,mBC7CjBiB,EAAgC,WACzC,IAEMT,EAAWC,cAEXS,EAAYf,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQa,aAC5DX,EAAYJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQV,QAMlE,OACI,4BACIe,IAAKQ,EACLP,UAAWJ,EAAY,WAAa,GACpCY,MAAOD,EACPE,SATR,SAA6BC,GACzBb,EFeuB,SAACU,GAAD,MAAwC,CACnEA,YACAtB,KD5B6B,qBGWhB0B,CAAgBD,EAAEE,cAAcJ,UAR/B,CAAC,YAAa,gBAAiB,aAAc,cAkB5CN,KAAI,SAACjB,GAAD,OACP,4BAAQc,IAAKd,GAAOA,QCpBvB4B,EAAgC,WACzC,IAAMC,EAAYtB,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQoB,aAC5DlB,EAAYJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQV,QAE5Da,EAAWC,cAMjB,OACI,6BACI,2BACIE,UAAWJ,EAAY,WAAa,GACpCmB,IAAI,MACJC,IAAI,IACJC,MAAO,CAAEC,OAAQ,WACjBjC,KAAK,QACLuB,MAAOM,EACPL,SAbZ,SAA6BC,GACzBb,EHOuB,SAACiB,GAAD,MAAwC,CACnEA,YACA7B,KDpB6B,qBIWhBkC,CAAgBC,SAASV,EAAEE,cAAcJ,MAAO,SAcrD,oDCrBCa,EAAqC,WAC9C,IAAMxB,EAAWC,cAEXwB,EAAiB9B,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQ4B,kBAMvE,IAAM1B,EAAYJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQV,QAElE,OACI,yBACIgB,UACIJ,EACM,0DACA,kDAGV,yBAAKI,UAAU,sCACX,qCACA,2BACIe,IAAI,KACJC,IAAI,KACJC,MAAO,CAAEC,OAAQ,WACjBjC,KAAK,QACLuB,MAAOc,EACPb,SAtBhB,SAAkCC,GAC9Bb,EJa4B,SAACyB,GAAD,MAAkD,CAClFA,iBACArC,KDxBkC,0BKSrBsC,CAAqBH,SAASV,EAAEE,cAAcJ,MAAO,SAuBtD,sCAEJ,kDChCCgB,EAAgC,WACzC,IAAM3B,EAAWC,cAEjB,OACI,4BAAQb,KAAK,SAASoB,QAAS,kBAAMR,EAASd,GAAc,MAA5D,SCDK0C,EAA4B,kBACrC,gCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,kCCPD,SAASC,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,MAGzC,SAASI,EAAaC,EAA2BC,GAA4B,IACxEC,EAAeF,EAAfE,WAEFC,EAAaH,EACbI,EAAcH,EACZI,EAAgBJ,EAAhBI,YAEJH,IACAA,EAAWI,aAAaF,EAAaD,GACrCD,EAAWI,aAAaH,EAAYE,IAGxC,IAAME,EAAQP,EAAaQ,UAAUC,QAAQC,QAAQ,GACjDC,EAAS,EACTC,EAAS,EAETL,EAAMtD,OAAS4D,aAAaC,0BAC5BH,EAASJ,EAAMQ,OAAOrC,EACtBkC,EAASL,EAAMQ,OAAOC,GAG1B,IAAMC,EAAShB,EAAaO,UAAUC,QAAQC,QAAQ,GAClDQ,EAAU,EACVC,EAAU,EAEVF,EAAOhE,OAAS4D,aAAaC,0BAC7BI,EAAUD,EAAOF,OAAOrC,EACxByC,EAAUF,EAAOF,OAAOC,GAG5Bf,EAAaO,UAAUC,QAAQC,QAAQ,GAAGU,aAAaT,EAAQQ,GAC/DnB,EAAaQ,UAAUC,QAAQC,QAAQ,GAAGU,aAAaF,EAASN,G,4CC/B7D,WACHS,EACAC,EACAhC,GAHG,MAWYtC,EAXZ,EAgEMuE,EAhEN,SAAAC,EAAA,6DAgEMD,EAhEN,WAiEC,OAAOvE,IACFyE,MAAK,kBAAM,KACXC,OAAM,SAACC,GAAD,OAASA,MAnErB,oCAAAH,EAAA,MAWH,wCAAAA,EAAA,sDACaI,EAAI,EADjB,YACoBA,EAAIC,GADxB,iBAEiBC,EAAI,EAFrB,YAEwBA,EAAID,EAAMD,EAAI,GAFtC,wBAGkBG,EAAQT,EAAYQ,GAAGE,SAGvBC,EAAQX,EAAYQ,EAAI,GAAGE,SAI3BE,EAAYH,EAAM,GAClBI,EAAaF,EAAM,GAGzBC,EAAUjD,MAAMmD,KDlCa,OCmC7BD,EAAWlD,MAAMmD,KDnCY,OCoBzC,UAiBkB1C,EAAMJ,GAjBxB,aAmBgB+B,EAAIS,GAAKT,EAAIS,EAAI,IAnBjC,wBAqBgBI,EAAUjD,MAAMmD,KDxCE,MCyClBD,EAAWlD,MAAMmD,KDzCC,MCmBlC,UAwBsB1C,EAAMJ,GAxB5B,UA2BuC,CAAC+B,EAAIS,EAAI,GAAIT,EAAIS,IAAvCT,EAAIS,GA3BrB,KA2ByBT,EAAIS,EAAI,GA3BjC,KA8BgB/B,EAAauB,EAAYQ,GAAIR,EAAYQ,EAAI,IA9B7D,+BAiCgBI,EAAUjD,MAAMmD,KDnDD,QCoDfD,EAAWlD,MAAMmD,KDpDF,QCkB/B,UAoCsB1C,EAAMJ,GApC5B,eAuCY4C,EAAUjD,MAAMmD,KD5DM,UC6DtBD,EAAWlD,MAAMmD,KD7DK,UCqBlC,UA0CkB1C,EAAMJ,GA1CxB,QAEyCwC,IAFzC,uBA6C4BR,EAAYO,EAAMD,EAAI,GAAGI,SAIjC,GAAG/C,MAAMmD,KDlEG,UCiBhC,QAC6BR,IAD7B,4DAXG,uBAWY5E,EAXZ,2CAKG6E,EAAMR,EAAIgB,OALb,kBAsEId,KAtEJ,4C,kECDA,WACHF,EACAC,EACAhC,GAHG,MAOYtC,EAPZ,EAgEMuE,EAhEN,SAAAC,EAAA,6DAgEMD,EAhEN,WAiEC,OAAOvE,IACFyE,MAAK,kBAAM,KACXC,OAAM,SAACC,GAAD,OAASA,MAnErB,oCAAAH,EAAA,MAOH,wCAAAA,EAAA,sDAGSI,EAAI,EAHb,YAGgBA,EAAIC,EAAM,GAH1B,iBAIY7C,EAAMqC,EAAIO,IAGVU,EAAUhB,EAFViB,EAAWX,GAEqBI,UAI5B,GAAG/C,MAAMmD,KFxBM,QE0BdN,EAAIF,EAAI,EAbzB,YAa4BE,EAAID,GAbhC,wBAckBW,EAAclB,EAAYQ,GAAGE,UAIvB,GAAG/C,MAAMmD,KFjCQ,OEezC,UAoBkB1C,EAAMJ,GApBxB,eAsBgB+B,EAAIS,GAAK9C,GAETsD,EAAQ,GAAGrD,MAAMmD,KFxCC,UEyClBI,EAAY,GAAGvD,MAAMmD,KFtCN,QEuCfE,EAAUE,EAEVxD,EAAMqC,EAAIS,GACVS,EAAWT,GAEXU,EAAY,GAAGvD,MAAMmD,KF/CH,UEgBlC,UAiCkB1C,EAAMJ,GAjCxB,QAaqCwC,IAbrC,gCAoCkC,CAACT,EAAIkB,GAAWlB,EAAIO,IAA7CP,EAAIO,GApCb,KAoCiBP,EAAIkB,GApCrB,KAsCQxC,EAAauB,EAAYM,GAAIN,EAAYiB,IAEvBjB,EAAYM,GAAGI,SAIvB,GAAG/C,MAAMmD,KFxDK,UEYhC,UA8Cc1C,EAAMJ,GA9CpB,QAG6BsC,IAH7B,uBAkDsBN,EAAYM,GAAGI,SAIvB,GAAG/C,MAAMmD,KFlES,UEYhC,6CAPG,uBAOYpF,EAPZ,2CAKG6E,EAAMR,EAAIgB,OALb,kBAsEId,KAtEJ,4C,sBCTA,SAASkB,EAAazD,EAAaD,GACtC,IAAM2D,EAAKC,KAAKC,KAAK5D,GACf6D,EAAKF,KAAKG,MAAM/D,GAGtB,OAAO4D,KAAKG,MAAMH,KAAKI,UAAYF,EAAKH,IAAOA,ECK5C,IAAMM,EAAiC,WAC1C,IAAIlE,EAAYtB,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQoB,aAC1DP,EAAYf,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQa,aAFlB,EAIN0E,mBAAS,IAJH,mBAIzCC,EAJyC,KAI1BC,EAJ0B,KAM1CC,EAAUhG,iBAAO,GAEjBiG,EAAcjG,iBAAO,GAErBkG,EAAWlG,iBAAO,GAElBmG,EAAWnG,iBAAO,KAZwB,EAcQ6F,mBAAS,CAAC,EAAG,IAdrB,mBAczCO,EAdyC,KAcnBC,EAdmB,KAgBhD,SAASC,IACL,IAAMC,EAAkB,GAEhB1F,EAAYoF,EAAZpF,QAEJa,EAAYb,IACZa,EAAYb,GAIhB,IAFA,IAAM2F,EAAOjB,KAAKC,KAAK9D,EAAYsE,EAAQnF,SAElC2D,EAAI,EAAGA,EAAIgC,EAAMhC,IACtB+B,EAAME,KAAKpB,EAAaa,EAASrF,QAASsF,EAAStF,UAGvD,OAAO0F,EAGX,SAASG,EAAW7G,GAqBhB,MApBa,CACT,gBAAiB,WACb,OAAOyG,KAEXK,WAJS,WAKL,OAAOL,IAAyB1G,MAAK,SAAUwE,EAAGwC,GAC9C,OAAOA,EAAIxC,MAGnByC,WATS,WAUL,OAAOP,IAAyB1G,MAAK,SAAUwE,EAAGwC,GAC9C,OAAOxC,EAAIwC,MAGnBE,UAdS,WAeL,OAAOR,MAKHzG,KAGhBkH,qBAAU,WACNhB,EAAiBW,EAAWvF,MAC7B,CAACO,IAEJqF,qBAAU,WACNhB,EAAiBW,EAAWvF,MAC7B,CAACA,IAEJ,IAAM6F,EAAmBhH,iBAAO,IAE1BiH,EAAmBjH,iBAAO,IAE1ByE,EAAMqB,EAAcb,OAGpBiC,EAASd,EAAqB,GAAgC,EAA3Ba,EAAiBpG,QAGpDsG,EAAQf,EAAqB,GAAgC,EAA3BY,EAAiBnG,QAEnDuG,EAAmBD,EAAQ1C,EA7Ee,ECR7C,WAAoC,IAAD,EACdoB,mBAAS,CAACtG,OAAO8H,WAAY9H,OAAO+H,cADtB,mBAC/Bd,EAD+B,KACzBe,EADyB,KActC,OAXAR,qBAAU,WACN,SAASS,IACLD,EAAQ,CAAChI,OAAO8H,WAAY9H,OAAO+H,cAIvC,OAFA/H,OAAOkI,iBAAiB,SAAUD,GAE3B,WACHjI,OAAOmI,oBAAoB,SAAUF,MAE1C,IAEIhB,EDyE2BmB,GA/Ec,mBA+EzCN,EA/EyC,KA+E7BC,EA/E6B,KAiFhDP,qBAAU,WACN,IAAMa,EAASC,SAASC,cAAc,UAElCF,GACAvB,EAAwB,CAACiB,EAAcM,EAAOG,aAAcV,MAEjE,CAACA,EAAYC,IAEhBP,qBAAU,WACN,IAAMa,EAASC,SAASC,cAAc,UAChCE,EAAOH,SAASC,cAAc,QAEhCF,GAAUI,GACV3B,EAAwB,CAACiB,EAAcM,EAAOG,aAAcV,MAEjE,IAEH,IAAMY,EAASjI,iBAAsB,MAE/BQ,EAAYJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQV,QAE5Da,EAAWC,cAEbwB,EAAiB9B,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQ4B,kBAGrEA,EAAiB,IAAM,IAAMA,GAE7B,IAAM/B,EAAmBC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQC,aAgCzE,OA9BAwG,qBAAU,WACN,GAAIvG,GAAayH,EAAQ,CAErB,IAAI/D,EAA6C,KAMjD,OAJI+D,EAAOpH,UACPqD,EAAc+D,EAAOpH,QAAQ+D,UAGzBzE,GACJ,IAAK,eHzHd,SAAP,uCG0HoB+H,CAAWpC,EAAe5B,EAAahC,GAAgBmC,MAAK,SAAC8D,GACrDA,GACA1H,EAASd,GAAc,OAG/B,MACJ,IAAK,kBFjId,SAAP,uCEkIoByI,CAActC,EAAe5B,EAAahC,GAAgBmC,MAAK,SAAC8D,GACxDA,GACA1H,EAASd,GAAc,WAQ5C,CAACa,IAE+B,IAA5B4F,EAAqB,GACxB,yBACIiC,IAAKJ,EACLf,OAAQA,EACRrF,MAAO,CACHyG,cAAerB,EAAiBpG,QAChC0H,YAAavB,EAAiBnG,QAC9B2H,aAAcxB,EAAiBnG,QAC/B4H,WAAYxB,EAAiBpG,SAEjCsG,MAAOA,EACPuB,MAAM,8BAEL5C,EAAchF,KAAI,SAAC6H,EAAqBC,GACrC,IAAMC,EAAqBF,EAAczB,EAAUf,EAAStF,QAE5D,OACI,uBAEIF,IAAKiI,EAELxF,UAAS,oBAAewF,EAAQxB,EAAvB,YACLF,EAAS2B,EADJ,MAIT,0BACI3B,OAAQ2B,EACRhH,MAAO,CACHmD,KJnLM,UIoLN8D,OAAQ,OACRC,cAAe,GACfC,YAAa,GAEjB7B,MAAOC,SAc3B,+BE/JO6B,MAnCf,WA2BI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAatI,IAAI,Q,kCCxBvBuI,EAA4B,CAC9B3I,UAAW,cACX2B,eAAgB,GAChBR,UAAW,GACXP,UAAW,YACXvB,MAAM,GA2CKU,EAxCC,WAA6D,IAA5DD,EAA2D,uDAAnD6I,EAAcC,EAAqC,uCACxE,OAAQA,EAAOtJ,MACX,IfpBgC,2BeqB5B,OAAO,eACAQ,EADP,CAEIE,UAAW4I,EAAO5I,YAG1B,IfzByB,oBe0BrB,OAAO,eACAF,EADP,CAEIqB,UAAWyH,EAAOzH,YAG1B,If9B8B,yBe+B1B,OAAO,eACArB,EADP,CAEI6B,eAAgBiH,EAAOjH,iBAG/B,IfnCyB,oBeoCrB,OAAO,eACA7B,EADP,CAEIc,UAAWgI,EAAOhI,YAG1B,IfxCsB,iBeyClB,OAAO,eACAd,EADP,CAEIT,KAAMuJ,EAAOvJ,OAGrB,QACI,OAAO,eACAS,KChDN+I,EAAcC,YAAgB,CACvC/I,YCFSgJ,EAAQC,YAAYH,EAAa,ICO9CI,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,QAGRzB,SAAS8B,eAAe,SnBoHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBzF,MAAK,SAAC0F,GACHA,EAAaC,gBAEhB1F,OAAM,SAAC2F,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc9a5c86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export const CHANGE_DEFAULT_ALGORITHM = \"CHANGE_DEFAULT_ALGORITHM\";\nexport const CHANGE_ARRAY_SIZE = \"CHANGE_ARRAY_SIZE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CHANGE_ARRAY_TYPE = \"CHANGE_ARRAY_TYPE\";\nexport const SORT_ALGORITHM = \"SORT_ALGORITHM\";\n\nexport type AlgorithmType = string;\nexport type ArraySize = number;\nexport type AnimationSpeed = number;\nexport type ArrayType = string;\nexport type SortAlgorithm = boolean;\n\nexport interface ChangeDefaultAlgorithm {\n    type: typeof CHANGE_DEFAULT_ALGORITHM;\n    algorithm: AlgorithmType;\n}\nexport interface ChangeArraySize {\n    type: typeof CHANGE_ARRAY_SIZE;\n    arraySize: ArraySize;\n}\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\nexport interface ChangeArrayType {\n    type: typeof CHANGE_ARRAY_TYPE;\n    arrayType: ArrayType;\n}\n\nexport interface SortAlgorithmType {\n    type: typeof SORT_ALGORITHM;\n    sort: SortAlgorithm;\n}\n\nexport type GlobalTypes =\n    | ChangeDefaultAlgorithm\n    | ChangeArraySize\n    | ChangeAnimationSpeed\n    | ChangeArrayType\n    | SortAlgorithmType;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    arraySize: ArraySize;\n    animationSpeed: AnimationSpeed;\n    arrayType: ArrayType;\n    sort: SortAlgorithm;\n}\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    AlgorithmType,\n    GlobalTypes,\n    ArraySize,\n    CHANGE_ARRAY_SIZE,\n    AnimationSpeed,\n    ArrayType,\n    CHANGE_ANIMATION_SPEED,\n    CHANGE_ARRAY_TYPE,\n    SortAlgorithm,\n    SORT_ALGORITHM\n} from \"./types\";\n\nexport const changeDefaultAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_DEFAULT_ALGORITHM\n});\n\nexport const changeArraySize = (arraySize: ArraySize): GlobalTypes => ({\n    arraySize,\n    type: CHANGE_ARRAY_SIZE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const changeArrayType = (arrayType: ArrayType): GlobalTypes => ({\n    arrayType,\n    type: CHANGE_ARRAY_TYPE\n});\n\nexport const sortAlgorithm = (sort: SortAlgorithm): GlobalTypes => ({\n    sort,\n    type: SORT_ALGORITHM\n});\n","import React, { FunctionComponent, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeDefaultAlgorithm } from \"../../actions/globals\";\n\nexport const AlgorithmToggle: FunctionComponent = () => {\n    const algorithms = useRef([\n        {\n            minifiedName: \"BUB\",\n            name: \"Bubble Sort\"\n        },\n        {\n            minifiedName: \"SEL\",\n            name: \"Selection Sort\"\n        },\n        {\n            minifiedName: \"INS\",\n            name: \"Insertion Sort\"\n        },\n        {\n            minifiedName: \"QUI\",\n            name: \"Quick Sort\"\n        },\n        {\n            minifiedName: \"MER\",\n            name: \"Merge Sort\"\n        }\n    ]);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div\n            key={defaultAlgorithm}\n            className={isSorting ? \"disabled algo-toggle d-flex\" : \"algo-toggle d-flex\"}\n        >\n            {algorithms.current.map((algo: { name: string; minifiedName: string }) =>\n                defaultAlgorithm === algo.name ? (\n                    <div key={algo.name} className=\"selected\" title={algo.name}>\n                        {algo.name}\n                    </div>\n                ) : (\n                    <div\n                        key={algo.name}\n                        title={algo.name}\n                        onClick={() => dispatch(changeDefaultAlgorithm(algo.name))}\n                    >\n                        {algo.minifiedName}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeArrayType } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const ArrayTypes: FunctionComponent = () => {\n    const types = [\"Randomize\", \"Almost Sorted\", \"Increasing\", \"Decreasing\"];\n\n    const dispatch = useDispatch();\n\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    function changeArrayTypeFunc(e: ChangeEvent<HTMLSelectElement>) {\n        dispatch(changeArrayType(e.currentTarget.value));\n    }\n\n    return (\n        <select\n            key={arrayType}\n            className={isSorting ? \"disabled\" : \"\"}\n            value={arrayType}\n            onChange={changeArrayTypeFunc}\n        >\n            {types.map((type) => (\n                <option key={type}>{type}</option>\n            ))}\n        </select>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeArraySize } from \"../../actions/globals\";\n\nexport const SizeSlider: FunctionComponent = () => {\n    const arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    function changeArraySizeFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeArraySize(parseInt(e.currentTarget.value, 10)));\n    }\n\n    return (\n        <div>\n            <input\n                className={isSorting ? \"disabled\" : \"\"}\n                max=\"100\"\n                min=\"1\"\n                style={{ cursor: \"pointer\" }}\n                type=\"range\"\n                value={arraySize}\n                onChange={changeArraySizeFunc}\n            />\n            <div>Change Array Size</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeAnimationSpeed } from \"../../actions/globals\";\n\nexport const AnimationSlider: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    function changeAnimationSpeedFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeAnimationSpeed(parseInt(e.currentTarget.value, 10)));\n    }\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    return (\n        <div\n            className={\n                isSorting\n                    ? \"disabled d-flex flex-column justify-center align-center\"\n                    : \"d-flex flex-column justify-center align-center\"\n            }\n        >\n            <div className=\"d-flex justify-center align-center\">\n                <div>Slow</div>\n                <input\n                    max=\"90\"\n                    min=\"10\"\n                    style={{ cursor: \"pointer\" }}\n                    type=\"range\"\n                    value={animationSpeed}\n                    onChange={changeAnimationSpeedFunc}\n                />\n                <div>Fast</div>\n            </div>\n            <div>Animation Speed</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sortAlgorithm } from \"../../actions/globals\";\n\nexport const SortButton: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <button type=\"button\" onClick={() => dispatch(sortAlgorithm(true))}>\n            Sort\n        </button>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { AlgorithmToggle } from \"./AlgorithmToggle\";\nimport { ArrayTypes } from \"./ArrayTypes\";\nimport { SizeSlider } from \"./SizeSlider\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { SortButton } from \"./Sort\";\n\nexport const Header: FunctionComponent = () => (\n    <header>\n        <AlgorithmToggle />\n        <ArrayTypes />\n        <SizeSlider />\n        <AnimationSlider />\n        <SortButton />\n    </header>\n);\n","export const arrayItemOriginalColor = \"#251b12\";\nexport const arrayItemCurrentPositionColor = \"blue\";\nexport const arrayItemNotEqualColor = \"red\";\nexport const arrayItemEqualColor = \"green\";\nexport const arrayItemSortedColor = \"hotpink\";\n\nexport function timer(ms: number) {\n    return new Promise((res) => setTimeout(res, ms));\n}\n\nexport function swapSVGNodes(svgChildren1: SVGGElement, svgChildren2: SVGGElement) {\n    const { parentNode } = svgChildren1;\n\n    const firstChild = svgChildren1;\n    const secondChild = svgChildren2;\n    const { nextSibling } = svgChildren2;\n\n    if (parentNode) {\n        parentNode.insertBefore(secondChild, firstChild);\n        parentNode.insertBefore(firstChild, nextSibling);\n    }\n\n    const first = svgChildren1.transform.baseVal.getItem(0);\n    let firstX = 0;\n    let firstY = 0;\n\n    if (first.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        firstX = first.matrix.e;\n        firstY = first.matrix.f;\n    }\n\n    const second = svgChildren2.transform.baseVal.getItem(0);\n    let secondX = 0;\n    let secondY = 0;\n\n    if (second.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        secondX = second.matrix.e;\n        secondY = second.matrix.f;\n    }\n\n    svgChildren2.transform.baseVal.getItem(0).setTranslate(firstX, secondY);\n    svgChildren1.transform.baseVal.getItem(0).setTranslate(secondX, firstY);\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes\n} from \"../commonUtilities\";\n\nexport async function BubbleSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    /*\n     * Let isSwapped = false;\n     */\n\n    async function sort() {\n        for (let i = 0; i < len; i++) {\n            for (let j = 0; j < len - i - 1; j++) {\n                const rect1 = svgChildren[j].children as HTMLCollectionOf<\n                    SVGRectElement | SVGTextElement\n                >;\n                const rect2 = svgChildren[j + 1].children as HTMLCollectionOf<\n                    SVGRectElement | SVGTextElement\n                >;\n\n                const firstRect = rect1[0];\n                const secondRect = rect2[0];\n\n                // Indicate these cells are currently being sorted\n                firstRect.style.fill = arrayItemCurrentPositionColor;\n                secondRect.style.fill = arrayItemCurrentPositionColor;\n\n                await timer(animationSpeed);\n\n                if (arr[j] > arr[j + 1]) {\n                    // If they are not in correct position\n                    firstRect.style.fill = arrayItemNotEqualColor;\n                    secondRect.style.fill = arrayItemNotEqualColor;\n\n                    await timer(animationSpeed);\n\n                    // IsSwapped = true;\n                    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\n                    // Swap SVG Elements;\n                    swapSVGNodes(svgChildren[j], svgChildren[j + 1]);\n                } else {\n                    // If elements are in correct position\n                    firstRect.style.fill = arrayItemEqualColor;\n                    secondRect.style.fill = arrayItemEqualColor;\n\n                    await timer(animationSpeed);\n                }\n\n                firstRect.style.fill = arrayItemOriginalColor;\n                secondRect.style.fill = arrayItemOriginalColor;\n\n                await timer(animationSpeed);\n            }\n\n            const lastElement = svgChildren[len - i - 1].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            lastElement[0].style.fill = arrayItemSortedColor;\n        }\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes\n} from \"../commonUtilities\";\n\nexport async function SelectionSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    async function sort() {\n        let i;\n\n        for (i = 0; i < len - 1; i++) {\n            let min = arr[i];\n            let minIndex = i;\n\n            let minRect = svgChildren[minIndex].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            minRect[0].style.fill = arrayItemEqualColor;\n\n            for (let j = i + 1; j < len; j++) {\n                const currentRect = svgChildren[j].children as HTMLCollectionOf<\n                    SVGRectElement | SVGTextElement\n                >;\n\n                currentRect[0].style.fill = arrayItemCurrentPositionColor;\n\n                await timer(animationSpeed);\n\n                if (arr[j] < min) {\n                    // Current Min Element\n                    minRect[0].style.fill = arrayItemOriginalColor;\n                    currentRect[0].style.fill = arrayItemEqualColor;\n                    minRect = currentRect;\n\n                    min = arr[j];\n                    minIndex = j;\n                } else {\n                    currentRect[0].style.fill = arrayItemOriginalColor;\n                }\n                await timer(animationSpeed);\n            }\n\n            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\n            swapSVGNodes(svgChildren[i], svgChildren[minIndex]);\n\n            const firstRect = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            firstRect[0].style.fill = arrayItemSortedColor;\n\n            await timer(animationSpeed);\n        }\n\n        // Paint last element as sorted\n        const firstRect = svgChildren[i].children as HTMLCollectionOf<\n            SVGRectElement | SVGTextElement\n        >;\n\n        firstRect[0].style.fill = arrayItemSortedColor;\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","export function getRandomInt(min: number, max: number): number {\n    const mi = Math.ceil(min);\n    const ma = Math.floor(max);\n\n    // The maximum is exclusive and the minimum is inclusive\n    return Math.floor(Math.random() * (ma - mi)) + mi;\n}\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { BubbleSort } from \"../../algorithms/BubbleSort\";\nimport { SelectionSort } from \"../../algorithms/SelectionSort\";\nimport { getRandomInt } from \"../Helper\";\nimport { arrayItemOriginalColor } from \"../../commonUtilities\";\nimport { sortAlgorithm } from \"../../actions/globals\";\n\nexport const ArrayBlocks: FunctionComponent = () => {\n    let arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n\n    const [arrayElements, setArrayElements] = useState([]);\n\n    const divisor = useRef(2);\n\n    const minElements = useRef(2);\n\n    const minRange = useRef(1);\n\n    const maxRange = useRef(100);\n\n    const [remainingHeightWidth, setRemainingHeightWidth] = useState([0, 0]);\n\n    function getRandomArrayElements() {\n        const array: number[] = [];\n\n        const { current } = minElements;\n\n        if (arraySize < current) {\n            arraySize = current;\n        }\n        const size = Math.ceil(arraySize / divisor.current);\n\n        for (let i = 0; i < size; i++) {\n            array.push(getRandomInt(minRange.current, maxRange.current));\n        }\n\n        return array;\n    }\n\n    function arrayTypes(type: string) {\n        const dict = {\n            \"Almost Sorted\": function () {\n                return getRandomArrayElements();\n            },\n            Decreasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return b - a;\n                });\n            },\n            Increasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return a - b;\n                });\n            },\n            Randomize() {\n                return getRandomArrayElements();\n            }\n        };\n\n        // @ts-ignore\n        return dict[type]();\n    }\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arraySize]);\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arrayType]);\n\n    const paddingLeftRight = useRef(80);\n\n    const paddingTopBottom = useRef(40);\n\n    const len = arrayElements.length;\n\n    // Subtract top and bottom margin\n    const height = remainingHeightWidth[0] - paddingTopBottom.current * 2;\n\n    // Subtract left and right margin\n    const width = remainingHeightWidth[1] - paddingLeftRight.current * 2;\n\n    const eachElementWidth = width / len;\n\n    const [innerWidth, innerHeight] = useWindowSize();\n\n    useEffect(() => {\n        const header = document.querySelector(\"header\");\n\n        if (header) {\n            setRemainingHeightWidth([innerHeight - header.offsetHeight, innerWidth]);\n        }\n    }, [innerWidth, innerHeight]);\n\n    useEffect(() => {\n        const header = document.querySelector(\"header\");\n        const body = document.querySelector(\"body\");\n\n        if (header && body) {\n            setRemainingHeightWidth([innerHeight - header.offsetHeight, innerWidth]);\n        }\n    }, []);\n\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    let animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    // As animationSpeed increase decrease its value because slow ---> fast\n    animationSpeed = 10 * (100 - animationSpeed);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    useEffect(() => {\n        if (isSorting && svgRef) {\n            // @ts-ignore\n            let svgChildren: HTMLCollectionOf<SVGGElement> = null;\n\n            if (svgRef.current) {\n                svgChildren = svgRef.current.children as HTMLCollectionOf<SVGGElement>;\n            }\n\n            switch (defaultAlgorithm) {\n                case \"Bubble Sort\":\n                    BubbleSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Selection Sort\":\n                    SelectionSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [isSorting]);\n\n    return remainingHeightWidth[0] !== 0 ? (\n        <svg\n            ref={svgRef}\n            height={height}\n            style={{\n                paddingBottom: paddingTopBottom.current,\n                paddingLeft: paddingLeftRight.current,\n                paddingRight: paddingLeftRight.current,\n                paddingTop: paddingTopBottom.current\n            }}\n            width={width}\n            xmlns=\"http://www.w3.org/2000/svg\"\n        >\n            {arrayElements.map((eachElement: number, index: number) => {\n                const eachElementHeight = (eachElement * height) / maxRange.current;\n\n                return (\n                    <g\n                        // eslint-disable-line react/no-array-index-key\n                        key={index}\n                        // eslint-enable-line react/no-array-index-key\n                        transform={`translate(${index * eachElementWidth} ${\n                            height - eachElementHeight\n                        })`}\n                    >\n                        <rect\n                            height={eachElementHeight}\n                            style={{\n                                fill: arrayItemOriginalColor,\n                                stroke: \"pink\",\n                                strokeOpacity: 0.9,\n                                strokeWidth: 2\n                            }}\n                            width={eachElementWidth}\n                        />\n                        {/* <text\n                            style={{ fill: \"white\" }}\n                            x={index * eachElementWidth + eachElementWidth / 2}\n                            y={height - eachElementHeight + 50}\n                        >\n                            {eachElement}\n                        </text> */}\n                    </g>\n                );\n            })}\n        </svg>\n    ) : (\n        <div />\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowSize(): number[] {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n\n    useEffect(() => {\n        function onResize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener(\"resize\", onResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", onResize);\n        };\n    }, []);\n\n    return size;\n}\n","import React, { ReactElement } from \"react\";\nimport { Header } from \"./components/Header\";\nimport { ArrayBlocks } from \"./components/ArrayBlocks\";\n\nfunction App(): ReactElement {\n    // Const [isLoading, toggleLoading] = useState(false);\n\n    /*\n     * UseEffect(() => {\n     *     const html = document.querySelector(\"html\");\n     */\n\n    /*\n     *     If (html) {\n     *         let value = \"\";\n     *         const theme = localStorage.getItem(\"theme\");\n     */\n\n    /*\n     *         If (theme === null) {\n     *             value = \"dark\";\n     *             localStorage.setItem(\"theme\", \"dark\");\n     *         } else {\n     *             value = theme;\n     *         }\n     *         html.setAttribute(\"theme\", value);\n     *         toggleLoading(false);\n     *     }\n     * }, []);\n     */\n\n    return (\n        <>\n            <Header />\n            <ArrayBlocks key=\"1\" />\n        </>\n    );\n}\n\nexport default App;\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    GlobalState,\n    GlobalTypes,\n    CHANGE_ARRAY_TYPE,\n    CHANGE_ARRAY_SIZE,\n    CHANGE_ANIMATION_SPEED,\n    SORT_ALGORITHM\n} from \"../actions/globals/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"Bubble Sort\",\n    animationSpeed: 50,\n    arraySize: 50,\n    arrayType: \"Randomize\",\n    sort: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_DEFAULT_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_ARRAY_SIZE: {\n            return {\n                ...state,\n                arraySize: action.arraySize\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CHANGE_ARRAY_TYPE: {\n            return {\n                ...state,\n                arrayType: action.arrayType\n            };\n        }\n        case SORT_ALGORITHM: {\n            return {\n                ...state,\n                sort: action.sort\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}