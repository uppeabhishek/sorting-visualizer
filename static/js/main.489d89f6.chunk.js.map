{"version":3,"sources":["serviceWorker.ts","actions/globals/types.ts","actions/globals/index.ts","components/Header/AlgorithmToggle.tsx","components/Header/ArrayTypes.tsx","components/Header/SizeSlider.tsx","components/Header/AnimationSlider.tsx","components/Header/Sort.tsx","components/Header/index.tsx","commonUtilities.ts","algorithms/BubbleSort.ts","algorithms/SelectionSort.ts","algorithms/InsertionSort.ts","algorithms/MergeSort.ts","algorithms/QuickSort.ts","components/ArrayBlocks/index.tsx","hooks/useWindowSize.ts","components/Information/index.tsx","Tutorial/Info.tsx","Tutorial/index.tsx","App.tsx","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","sortAlgorithm","sort","type","AlgorithmToggle","algorithms","useRef","minifiedName","name","defaultAlgorithm","useSelector","state","globals","algorithm","isSorting","dispatch","useDispatch","key","className","current","map","algo","title","onClick","ArrayTypes","arrayType","InputLabel","id","Select","disabled","labelId","value","onChange","event","changeArrayType","target","MenuItem","SizeSlider","arraySize","Typography","color","gutterBottom","Slider","aria-labelledby","getAriaValueText","toString","marks","max","min","step","valueLabelDisplay","changeArraySize","AnimationSlider","animationSpeed","changeAnimationSpeed","SortButton","Button","variant","Header","reload","timer","ms","Promise","res","setTimeout","getRandom","mi","Math","ceil","ma","floor","random","fillColor","svgChildren","index","children","style","fill","swapSVGNodes","svgChildren1","svgChildren2","parentNode","firstChild","secondChild","nextSibling","insertBefore","first","transform","baseVal","getItem","firstX","firstY","SVGTransform","SVG_TRANSFORM_TRANSLATE","matrix","e","f","second","secondX","secondY","setTranslate","arr","func","a","then","catch","err","i","len","j","length","minRect","minIndex","currentRect","currentElement","currentSVGElement","currentElementIndex","array","MergeHelper","MergeSortHelper","low","high","mid","console","log","firstSize","secondSize","firstArray","Array","secondArray","k","firstRect","secondRect","ParitionHelper","QuickSortHelper","pivotIndex","currentIndex","ArrayBlocks","useState","arrayElements","setArrayElements","divisor","minElements","minRange","maxRange","remainingHeightWidth","setRemainingHeightWidth","getRandomArrayElements","size","push","almostSortElements","si","ei","sortedElements","temp","rI","shuffle","arrayTypes","b","Decreasing","Increasing","Randomize","useEffect","marginLeftRight","marginTopBottom","height","eachElementWidth","innerWidth","innerHeight","setSize","onResize","addEventListener","removeEventListener","useWindowSize","item","document","querySelector","clientHeight","clientWidth","svgRef","BubbleSort","ele","SelectionSort","InsertionSort","MergeSort","QuickSort","marginTop","marginBottom","marginLeft","marginRight","ref","width","xmlns","eachElement","eachElementHeight","stroke","strokeOpacity","strokeWidth","alignmentBaseline","textAnchor","x","y","Information","Bar","backgroundColor","Info","activeStep","0","1","2","3","4","5","DialogTitle","withStyles","theme","createStyles","root","margin","padding","spacing","closeButton","position","right","top","palette","grey","props","classes","onClose","other","disableTypography","IconButton","aria-label","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","useStyles","makeStyles","maxWidth","flexGrow","Tutorial","React","open","setOpen","handleClose","useTheme","setActiveStep","Dialog","fullWidth","dividers","MobileStepper","backButton","prevActiveStep","direction","nextButton","steps","App","initialState","pause","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.489d89f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export const CHANGE_DEFAULT_ALGORITHM = \"CHANGE_DEFAULT_ALGORITHM\";\nexport const CHANGE_ARRAY_SIZE = \"CHANGE_ARRAY_SIZE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CHANGE_ARRAY_TYPE = \"CHANGE_ARRAY_TYPE\";\nexport const SORT_ALGORITHM = \"SORT_ALGORITHM\";\nexport const PAUSE_EXECUTION = \"PAUSE_EXECUTION\";\n\nexport type AlgorithmType = string;\nexport type ArraySize = number;\nexport type AnimationSpeed = number;\nexport type ArrayType = string;\nexport type SortAlgorithm = boolean;\nexport type PauseExecution = boolean;\n\nexport interface ChangeDefaultAlgorithm {\n    type: typeof CHANGE_DEFAULT_ALGORITHM;\n    algorithm: AlgorithmType;\n}\nexport interface ChangeArraySize {\n    type: typeof CHANGE_ARRAY_SIZE;\n    arraySize: ArraySize;\n}\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\nexport interface ChangeArrayType {\n    type: typeof CHANGE_ARRAY_TYPE;\n    arrayType: ArrayType;\n}\n\nexport interface SortAlgorithmType {\n    type: typeof SORT_ALGORITHM;\n    sort: SortAlgorithm;\n}\n\nexport interface PauseExecutionType {\n    type: typeof PAUSE_EXECUTION;\n    pause: PauseExecution;\n}\n\nexport type GlobalTypes =\n    | ChangeDefaultAlgorithm\n    | ChangeArraySize\n    | ChangeAnimationSpeed\n    | ChangeArrayType\n    | SortAlgorithmType\n    | PauseExecutionType;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    arraySize: ArraySize;\n    animationSpeed: AnimationSpeed;\n    arrayType: ArrayType;\n    sort: SortAlgorithm;\n    pause: PauseExecution;\n}\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    AlgorithmType,\n    GlobalTypes,\n    ArraySize,\n    CHANGE_ARRAY_SIZE,\n    AnimationSpeed,\n    ArrayType,\n    CHANGE_ANIMATION_SPEED,\n    CHANGE_ARRAY_TYPE,\n    SortAlgorithm,\n    SORT_ALGORITHM,\n    PAUSE_EXECUTION,\n    PauseExecution\n} from \"./types\";\n\nexport const changeDefaultAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_DEFAULT_ALGORITHM\n});\n\nexport const changeArraySize = (arraySize: ArraySize): GlobalTypes => ({\n    arraySize,\n    type: CHANGE_ARRAY_SIZE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const changeArrayType = (arrayType: ArrayType): GlobalTypes => ({\n    arrayType,\n    type: CHANGE_ARRAY_TYPE\n});\n\nexport const sortAlgorithm = (sort: SortAlgorithm): GlobalTypes => ({\n    sort,\n    type: SORT_ALGORITHM\n});\n\nexport const pauseExecution = (pause: PauseExecution): GlobalTypes => ({\n    pause,\n    type: PAUSE_EXECUTION\n});\n","import React, { FunctionComponent, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeDefaultAlgorithm } from \"../../actions/globals\";\n\nexport const AlgorithmToggle: FunctionComponent = () => {\n    const algorithms = useRef([\n        {\n            minifiedName: \"QUI\",\n            name: \"Quick Sort\"\n        },\n        {\n            minifiedName: \"BUB\",\n            name: \"Bubble Sort\"\n        },\n        {\n            minifiedName: \"SEL\",\n            name: \"Selection Sort\"\n        },\n        {\n            minifiedName: \"INS\",\n            name: \"Insertion Sort\"\n        },\n        {\n            minifiedName: \"MER\",\n            name: \"Merge Sort\"\n        }\n    ]);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div\n            key={defaultAlgorithm}\n            className={isSorting ? \"disabled algo-toggle d-flex\" : \"algo-toggle d-flex\"}\n        >\n            {algorithms.current.map((algo: { name: string; minifiedName: string }) =>\n                defaultAlgorithm === algo.name ? (\n                    <div key={algo.name} className=\"selected\" title={algo.name}>\n                        {algo.name}\n                    </div>\n                ) : (\n                    <div\n                        key={algo.name}\n                        title={algo.name}\n                        onClick={() => dispatch(changeDefaultAlgorithm(algo.name))}\n                    >\n                        {algo.minifiedName}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { MenuItem, Select } from \"@material-ui/core\";\nimport { changeArrayType } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const ArrayTypes: FunctionComponent = () => {\n    const types = [\"Randomize\", \"Almost Sorted\", \"Increasing\", \"Decreasing\"];\n\n    const dispatch = useDispatch();\n\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeArrayType(event.target.value as string));\n    };\n\n    return (\n        <div>\n            <InputLabel id=\"select\">Array Type</InputLabel>\n            <Select\n                disabled={isSorting}\n                id=\"select\"\n                labelId=\"select\"\n                value={arrayType}\n                onChange={handleChange}\n            >\n                {types.map((type) => (\n                    <MenuItem value={type}>{type}</MenuItem>\n                ))}\n            </Select>\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Typography, Slider } from \"@material-ui/core\";\nimport { RootState } from \"../../reducers\";\nimport { changeArraySize } from \"../../actions/globals\";\n\nexport const SizeSlider: FunctionComponent = () => {\n    const arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    function changeArraySizeFunc(event: ChangeEvent<{}>, value: number | number[]) {\n        if (typeof value === \"number\") {\n            dispatch(changeArraySize(value));\n        }\n    }\n\n    function getArraySize(value: number) {\n        return value.toString();\n    }\n\n    return (\n        <div>\n            <Typography color=\"textPrimary\" gutterBottom={true} id=\"arraySizeSlider\">\n                Array Size\n            </Typography>\n            <Slider\n                aria-labelledby=\"arraySizeSlider\"\n                disabled={isSorting}\n                getAriaValueText={getArraySize}\n                marks={true}\n                max={90}\n                min={10}\n                step={10}\n                value={arraySize}\n                valueLabelDisplay=\"off\"\n                onChange={changeArraySizeFunc}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Slider, Typography } from \"@material-ui/core\";\nimport { RootState } from \"../../reducers\";\nimport { changeAnimationSpeed } from \"../../actions/globals\";\n\nexport const AnimationSlider: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    function changeAnimationSpeedFunc(event: ChangeEvent<{}>, value: number | number[]) {\n        if (typeof value === \"number\") {\n            dispatch(changeAnimationSpeed(value));\n        }\n    }\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    return (\n        <div>\n            <Typography color=\"textPrimary\" gutterBottom={true} id=\"animationSpeedSlider\">\n                Animation Speed\n            </Typography>\n            <Slider\n                aria-labelledby=\"animationSpeedSliderr\"\n                disabled={isSorting}\n                getAriaValueText={getAnimationSpeed}\n                marks={true}\n                max={90}\n                min={10}\n                step={10}\n                value={animationSpeed}\n                valueLabelDisplay=\"off\"\n                onChange={changeAnimationSpeedFunc}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"@material-ui/core\";\nimport { sortAlgorithm } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const SortButton: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    return (\n        <Button\n            color=\"primary\"\n            disabled={isSorting}\n            variant=\"contained\"\n            onClick={() => dispatch(sortAlgorithm(true))}\n        >\n            Sort\n        </Button>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { AlgorithmToggle } from \"./AlgorithmToggle\";\nimport { ArrayTypes } from \"./ArrayTypes\";\nimport { SizeSlider } from \"./SizeSlider\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { SortButton } from \"./Sort\";\n\n// Import { Controls } from \"../Controls\";\n\nexport const Header: FunctionComponent = () => (\n    <header>\n        <div className=\"title\" onClick={() => window.location.reload()}>\n            Sorting Visualizer\n        </div>\n        <AlgorithmToggle />\n        <ArrayTypes />\n        <SizeSlider />\n        <AnimationSlider />\n        <SortButton />\n        {/* <Controls /> */}\n    </header>\n);\n","export const arrayItemOriginalColor = \"#251b12\";\nexport const arrayItemCurrentPositionColor = \"blue\";\nexport const arrayItemNotEqualColor = \"red\";\nexport const arrayItemEqualColor = \"green\";\nexport const arrayItemSortedColor = \"hotpink\";\n\nexport function timer(ms: number) {\n    return new Promise((res) => setTimeout(res, ms));\n}\n\nexport function getRandom(min: number, max: number): number {\n    const mi = Math.ceil(min);\n    const ma = Math.floor(max);\n\n    // The maximum is exclusive and the minimum is inclusive\n    return Math.floor(Math.random() * (ma - mi + 1)) + mi;\n}\n\nexport function fillColor(\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    index: number,\n    color: string\n) {\n    const rect = svgChildren[index].children as HTMLCollectionOf<SVGRectElement | SVGTextElement>;\n\n    rect[0].style.fill = color;\n}\n\nexport function shuffle(arr: Array<any>) {\n    const le = arr.length;\n\n    for (let i = le - 1; i > 0; i--) {\n        const rI = getRandom(0, i - 1);\n\n        [arr[i], arr[rI]] = [arr[rI], arr[i]];\n    }\n\n    return arr;\n}\n\nexport function swapSVGNodes(svgChildren1: SVGGElement, svgChildren2: SVGGElement) {\n    const { parentNode } = svgChildren1;\n\n    const firstChild = svgChildren1;\n    const secondChild = svgChildren2;\n    const { nextSibling } = svgChildren2;\n\n    if (parentNode) {\n        parentNode.insertBefore(secondChild, firstChild);\n        parentNode.insertBefore(firstChild, nextSibling);\n    }\n\n    const first = svgChildren1.transform.baseVal.getItem(0);\n    let firstX = 0;\n    let firstY = 0;\n\n    if (first.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        firstX = first.matrix.e;\n        firstY = first.matrix.f;\n    }\n\n    const second = svgChildren2.transform.baseVal.getItem(0);\n    let secondX = 0;\n    let secondY = 0;\n\n    if (second.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        secondX = second.matrix.e;\n        secondY = second.matrix.f;\n    }\n\n    svgChildren2.transform.baseVal.getItem(0).setTranslate(firstX, secondY);\n    svgChildren1.transform.baseVal.getItem(0).setTranslate(secondX, firstY);\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function BubbleSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    /*\n     * Let isSwapped = false;\n     */\n    async function sort() {\n        for (let i = 0; i < len; i++) {\n            for (let j = 0; j < len - i - 1; j++) {\n                // Indicate these cells are currently being sorted\n                fillColor(svgChildren, j, arrayItemCurrentPositionColor);\n                fillColor(svgChildren, j + 1, arrayItemCurrentPositionColor);\n\n                await timer(animationSpeed);\n\n                if (arr[j] > arr[j + 1]) {\n                    // If they are not in correct position\n                    fillColor(svgChildren, j, arrayItemNotEqualColor);\n                    fillColor(svgChildren, j + 1, arrayItemNotEqualColor);\n\n                    await timer(animationSpeed);\n\n                    // IsSwapped = true;\n                    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\n                    // Swap SVG Elements;\n                    swapSVGNodes(svgChildren[j], svgChildren[j + 1]);\n                } else {\n                    // If elements are in correct position\n                    fillColor(svgChildren, j, arrayItemEqualColor);\n                    fillColor(svgChildren, j + 1, arrayItemEqualColor);\n\n                    await timer(animationSpeed);\n                }\n\n                fillColor(svgChildren, j, arrayItemOriginalColor);\n                fillColor(svgChildren, j + 1, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n            }\n\n            fillColor(svgChildren, len - i - 1, arrayItemSortedColor);\n        }\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function SelectionSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    async function sort() {\n        let i;\n\n        for (i = 0; i < len - 1; i++) {\n            let min = arr[i];\n            let minIndex = i;\n\n            let minRect = svgChildren[minIndex].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            minRect[0].style.fill = arrayItemEqualColor;\n\n            for (let j = i + 1; j < len; j++) {\n                const currentRect = svgChildren[j].children as HTMLCollectionOf<\n                    SVGRectElement | SVGTextElement\n                >;\n\n                currentRect[0].style.fill = arrayItemCurrentPositionColor;\n\n                await timer(animationSpeed);\n\n                if (arr[j] < min) {\n                    // Current Min Element\n                    minRect[0].style.fill = arrayItemOriginalColor;\n                    currentRect[0].style.fill = arrayItemEqualColor;\n                    minRect = currentRect;\n\n                    min = arr[j];\n                    minIndex = j;\n                } else {\n                    currentRect[0].style.fill = arrayItemOriginalColor;\n                }\n                await timer(animationSpeed);\n            }\n\n            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\n            swapSVGNodes(svgChildren[i], svgChildren[minIndex]);\n\n            const firstRect = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            firstRect[0].style.fill = arrayItemSortedColor;\n\n            await timer(animationSpeed);\n        }\n\n        // Paint last element as sorted\n        fillColor(svgChildren, i, arrayItemSortedColor);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function InsertionSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    async function sort() {\n        const minElement = svgChildren[0].children as HTMLCollectionOf<\n            SVGRectElement | SVGTextElement\n        >;\n\n        minElement[0].style.fill = arrayItemEqualColor;\n\n        await timer(animationSpeed);\n\n        let i;\n\n        for (i = 1; i < len; i++) {\n            let currentElement = arr[i];\n            let currentElementIndex = i;\n\n            let currentSVGElement = svgChildren[currentElementIndex].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            for (let j = 0; j <= i; j++) {\n                currentSVGElement[0].style.fill = arrayItemCurrentPositionColor;\n\n                fillColor(svgChildren, j, arrayItemCurrentPositionColor);\n\n                await timer(animationSpeed);\n\n                if (currentElement < arr[j]) {\n                    currentSVGElement[0].style.fill = arrayItemNotEqualColor;\n\n                    fillColor(svgChildren, j, arrayItemNotEqualColor);\n\n                    await timer(animationSpeed);\n\n                    [arr[j], arr[currentElementIndex]] = [arr[currentElementIndex], arr[j]];\n\n                    currentElement = arr[i];\n\n                    swapSVGNodes(svgChildren[j], svgChildren[currentElementIndex]);\n\n                    currentSVGElement[0].style.fill = arrayItemOriginalColor;\n\n                    fillColor(svgChildren, j, arrayItemOriginalColor);\n\n                    await timer(animationSpeed);\n\n                    currentSVGElement = svgChildren[i].children as HTMLCollectionOf<\n                        SVGRectElement | SVGTextElement\n                    >;\n                    currentElementIndex = i;\n                } else {\n                    fillColor(svgChildren, j, arrayItemEqualColor);\n\n                    await timer(animationSpeed);\n\n                    currentSVGElement[0].style.fill = arrayItemOriginalColor;\n\n                    fillColor(svgChildren, j, arrayItemOriginalColor);\n\n                    await timer(animationSpeed);\n                }\n            }\n        }\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes\n} from \"../commonUtilities\";\n\nexport async function MergeSort(\n    array: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = array.length;\n\n    async function MergeHelper(array: Array<number>, low: number, mid: number, high: number) {\n        console.log(low, mid, high);\n\n        const firstSize = mid - low + 1;\n        const secondSize = high - mid;\n\n        const firstArray = new Array(firstSize);\n        const secondArray = new Array(secondSize);\n\n        for (let i = 0; i < firstSize; i++) {\n            firstArray[i] = array[low + i];\n        }\n\n        for (let i = 0; i < secondSize; i++) {\n            secondArray[i] = array[mid + i + 1];\n        }\n\n        let i = 0;\n        let j = 0;\n        let k = low;\n\n        while (i < firstSize && j < secondSize) {\n            const first = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            const second = svgChildren[j].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            const firstRect = first[0];\n            const secondRect = second[0];\n\n            // Indicate these cells are currently being sorted\n            firstRect.style.fill = arrayItemCurrentPositionColor;\n            secondRect.style.fill = arrayItemCurrentPositionColor;\n\n            await timer(animationSpeed);\n\n            if (firstArray[i] <= secondArray[j]) {\n                // Indicate these cells are currently being sorted\n                firstRect.style.fill = arrayItemNotEqualColor;\n                secondRect.style.fill = arrayItemNotEqualColor;\n\n                await timer(animationSpeed);\n\n                // SwapSVGNodes(svgChildren[i], svgChildren[k]);\n\n                array[k++] = firstArray[i];\n                i += 1;\n            } else {\n                // Indicate these cells are currently being sorted\n                firstRect.style.fill = arrayItemEqualColor;\n                secondRect.style.fill = arrayItemEqualColor;\n\n                await timer(animationSpeed);\n\n                // SwapSVGNodes(svgChildren[j], svgChildren[k]);\n\n                array[k++] = secondArray[j];\n                j += 1;\n            }\n        }\n\n        while (i < firstSize) {\n            const first = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n            const firstRect = first[0];\n\n            // SwapSVGNodes(svgChildren[i], svgChildren[k]);\n            firstRect.style.fill = arrayItemEqualColor;\n\n            await timer(animationSpeed);\n\n            array[k++] = firstArray[i];\n            i += 1;\n        }\n\n        while (j < secondSize) {\n            const first = svgChildren[j].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n            const firstRect = first[0];\n\n            firstRect.style.fill = arrayItemEqualColor;\n\n            await timer(animationSpeed);\n\n            // SwapSVGNodes(svgChildren[j], svgChildren[k]);\n            array[k++] = secondArray[j];\n            j += 1;\n        }\n    }\n\n    async function MergeSortHelper(array: Array<number>, low: number, high: number) {\n        if (low >= high) {\n            return;\n        }\n        const mid = Math.floor(low + (high - low) / 2);\n\n        await MergeSortHelper(array, low, mid);\n        await MergeSortHelper(array, mid + 1, high);\n        await MergeHelper(array, low, mid, high);\n    }\n\n    async function sort() {\n        await MergeSortHelper(array, 0, len - 1);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function QuickSort(\n    array: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = array.length;\n\n    async function ParitionHelper(array: number[], low: number, high: number) {\n        const pivotIndex = high;\n\n        let currentIndex = low;\n\n        fillColor(svgChildren, pivotIndex, arrayItemCurrentPositionColor);\n\n        for (let i = low; i < high; i++) {\n            fillColor(svgChildren, i, arrayItemCurrentPositionColor);\n            fillColor(svgChildren, currentIndex, arrayItemCurrentPositionColor);\n\n            await timer(animationSpeed);\n\n            if (array[i] < array[pivotIndex]) {\n                fillColor(svgChildren, i, arrayItemNotEqualColor);\n                fillColor(svgChildren, currentIndex, arrayItemNotEqualColor);\n\n                await timer(animationSpeed);\n\n                swapSVGNodes(svgChildren[currentIndex], svgChildren[i]);\n\n                [array[i], array[currentIndex]] = [array[currentIndex], array[i]];\n\n                fillColor(svgChildren, i, arrayItemOriginalColor);\n                fillColor(svgChildren, currentIndex, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n\n                currentIndex++;\n            } else {\n                fillColor(svgChildren, i, arrayItemEqualColor);\n                fillColor(svgChildren, currentIndex, arrayItemEqualColor);\n\n                await timer(animationSpeed);\n\n                fillColor(svgChildren, i, arrayItemOriginalColor);\n                fillColor(svgChildren, currentIndex, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n            }\n            await timer(animationSpeed);\n        }\n\n        fillColor(svgChildren, pivotIndex, arrayItemOriginalColor);\n\n        await timer(animationSpeed);\n\n        swapSVGNodes(svgChildren[currentIndex], svgChildren[pivotIndex]);\n\n        [array[pivotIndex], array[currentIndex]] = [array[currentIndex], array[pivotIndex]];\n\n        return currentIndex;\n    }\n\n    async function QuickSortHelper(array: number[], low: number, high: number) {\n        if (low >= high) {\n            return;\n        }\n\n        const pivotIndex = await ParitionHelper(array, low, high);\n\n        await QuickSortHelper(array, low, pivotIndex - 1);\n        await QuickSortHelper(array, pivotIndex + 1, high);\n    }\n\n    async function sort() {\n        await QuickSortHelper(array, 0, len - 1);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { BubbleSort } from \"../../algorithms/BubbleSort\";\nimport { SelectionSort } from \"../../algorithms/SelectionSort\";\nimport { getRandom, shuffle, arrayItemOriginalColor } from \"../../commonUtilities\";\n\nimport { sortAlgorithm } from \"../../actions/globals\";\nimport { InsertionSort } from \"../../algorithms/InsertionSort\";\nimport { MergeSort } from \"../../algorithms/MergeSort\";\nimport { QuickSort } from \"../../algorithms/QuickSort\";\n\nexport const ArrayBlocks: FunctionComponent = () => {\n    let arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n\n    const [arrayElements, setArrayElements] = useState([]);\n\n    const divisor = useRef(2);\n\n    const minElements = useRef(2);\n\n    const minRange = useRef(1);\n\n    const maxRange = useRef(100);\n\n    const [remainingHeightWidth, setRemainingHeightWidth] = useState([0, 0]);\n\n    function getRandomArrayElements() {\n        const array: number[] = [];\n\n        const { current } = minElements;\n\n        if (arraySize < current) {\n            arraySize = current;\n        }\n        const size = Math.ceil(arraySize / divisor.current);\n\n        for (let i = 0; i < size; i++) {\n            array.push(getRandom(minRange.current, maxRange.current));\n        }\n\n        return array;\n    }\n\n    function almostSortElements(si: number, ei: number, sortedElements: Array<number>) {\n        let temp = [];\n\n        for (let i = si; i < ei; i++) {\n            temp.push(sortedElements[i]);\n        }\n\n        temp = shuffle(temp);\n\n        let index = 0;\n\n        for (let i = si; i < ei; i++) {\n            sortedElements[i] = temp[index++];\n        }\n    }\n\n    function arrayTypes(type: string) {\n        const dict = {\n            \"Almost Sorted\": function () {\n                let sortedElements;\n\n                if (getRandom(0, 1) === 0) {\n                    sortedElements = getRandomArrayElements().sort(function (a, b) {\n                        return a - b;\n                    });\n                } else {\n                    sortedElements = getRandomArrayElements().sort(function (a, b) {\n                        return b - a;\n                    });\n                }\n\n                almostSortElements(0, Math.floor(sortedElements.length / 6), sortedElements);\n\n                almostSortElements(\n                    Math.ceil(sortedElements.length / 1.25),\n                    sortedElements.length,\n                    sortedElements\n                );\n\n                return sortedElements;\n            },\n            Decreasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return b - a;\n                });\n            },\n            Increasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return a - b;\n                });\n            },\n            Randomize() {\n                return getRandomArrayElements();\n            }\n        };\n\n        // @ts-ignore\n        return dict[type]();\n    }\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arraySize]);\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arrayType]);\n\n    const marginLeftRight = useRef(20);\n\n    const marginTopBottom = useRef(20);\n\n    const len = arrayElements.length;\n\n    // Subtract top and bottom margin\n    const height = remainingHeightWidth[0] - marginTopBottom.current * 2;\n\n    // Subtract left and right margin\n    const width = remainingHeightWidth[1] - marginLeftRight.current * 2;\n\n    const eachElementWidth = width / len;\n\n    const [innerWidth, innerHeight] = useWindowSize();\n\n    useEffect(() => {\n        const item = document.querySelector(\".svg-block\") as HTMLElement;\n\n        if (item) {\n            setRemainingHeightWidth([item.clientHeight, item.clientWidth]);\n        }\n    }, [innerWidth, innerHeight]);\n\n    useEffect(() => {\n        const item = document.querySelector(\".svg-block\") as HTMLElement;\n\n        if (item) {\n            setRemainingHeightWidth([item.clientHeight, item.clientWidth]);\n        }\n    }, []);\n\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    let animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    // As animationSpeed increase decrease its value because slow ---> fast\n    animationSpeed = 10 * (100 - animationSpeed);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    useEffect(() => {\n        if (isSorting && svgRef) {\n            // @ts-ignore\n            let svgChildren: HTMLCollectionOf<SVGGElement> = null;\n\n            if (svgRef.current) {\n                svgChildren = svgRef.current.children as HTMLCollectionOf<SVGGElement>;\n            }\n\n            switch (defaultAlgorithm) {\n                case \"Bubble Sort\":\n                    BubbleSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Selection Sort\":\n                    SelectionSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Insertion Sort\":\n                    InsertionSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Merge Sort\":\n                    MergeSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            // Dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Quick Sort\":\n                    QuickSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [isSorting]);\n\n    return (\n        <div\n            className=\"svg-block\"\n            style={{\n                marginTop: marginTopBottom.current,\n                marginBottom: marginTopBottom.current,\n                marginLeft: marginLeftRight.current,\n                marginRight: marginLeftRight.current\n            }}\n        >\n            <svg\n                key={defaultAlgorithm.toString() + isSorting}\n                ref={svgRef}\n                height=\"100%\"\n                width=\"100%\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                {arrayElements.map((eachElement: number, index: number) => {\n                    const eachElementHeight = (eachElement * height) / maxRange.current;\n\n                    return (\n                        <g\n                            key={\n                                (index * eachElementWidth).toString() +\n                                (height - eachElementHeight).toString()\n                            }\n                            transform={`translate(${index * eachElementWidth} ${\n                                height - eachElementHeight\n                            })`}\n                        >\n                            <rect\n                                height={eachElementHeight}\n                                style={{\n                                    fill: arrayItemOriginalColor,\n                                    stroke: \"pink\",\n                                    strokeOpacity: 0.9,\n                                    strokeWidth: 2\n                                }}\n                                width={eachElementWidth}\n                            />\n                            <text\n                                alignmentBaseline=\"central\"\n                                style={{ fill: \"white\" }}\n                                textAnchor=\"middle\"\n                                x={eachElementWidth / 2}\n                                y={eachElementHeight / 2}\n                            >\n                                {eachElementWidth > 23 ? eachElement : \"\"}\n                            </text>\n                        </g>\n                    );\n                })}\n            </svg>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowSize(): number[] {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n\n    useEffect(() => {\n        function onResize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener(\"resize\", onResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", onResize);\n        };\n    }, []);\n\n    return size;\n}\n","import React, { FunctionComponent } from \"react\";\nimport {\n    arrayItemCurrentPositionColor,\n    arrayItemNotEqualColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor\n} from \"../../commonUtilities\";\n\nexport const Information: FunctionComponent = () => {\n    const Bar: FunctionComponent<{ color: string }> = ({ color }) => (\n        <div style={{ backgroundColor: color, width: \"100px\", height: \"20px\" }} />\n    );\n\n    return (\n        <div className=\"information\">\n            <div className=\"item\">\n                <div>Current Comparision</div>\n                <Bar color={arrayItemCurrentPositionColor} />\n            </div>\n            <div className=\"item\">\n                <div>Incorrect Position</div>\n                <Bar color={arrayItemNotEqualColor} />\n            </div>\n            <div className=\"item\">\n                <div>Correct Position</div>\n                <Bar color={arrayItemEqualColor} />\n            </div>\n            <div className=\"item\">\n                <div>Sorted</div>\n                <Bar color={arrayItemSortedColor} />\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport algorithmDropDown from \"../../assets/AlgorithmDropDown.png\";\nimport mazeDropDown from \"../../assets/MazeDropDown.png\";\nimport Download from \"../../assets/Download.png\";\n\nconst Info: FunctionComponent<{ activeStep: number }> = ({ activeStep }) => {\n    const pages = {\n        0: (\n            <div>\n                <Typography variant=\"h6\">\n                    This tutorial will walk through the features of Sorting Visualizer.\n                </Typography>\n                <br />\n                <Typography>\n                    If you want to dive into the application directly. Feel free to Skip this\n                    tutorial by closing it.\n                </Typography>\n            </div>\n        ),\n        1: (\n            <div>\n                <Typography variant=\"h6\">Sorting Algorithm</Typography>\n                <br />\n                <div>I have implemented the below sorting algorithms.</div>\n                <ul>\n                    <li>Merge Sort</li>\n                    <li>Quick Sort</li>\n                    <li>Bubble Sort</li>\n                    <li>Insertion Sort</li>\n                    <li>Selection Sort</li>\n                </ul>\n\n                <div>\n                    To choose an algorithm, pick an algorithm from \"Algorithms\" drop down menu.\n                </div>\n                <div className=\"center-items\" style={{ marginTop: 10 }}>\n                    {/* <img src={algorithmDropDown} /> */}\n                </div>\n            </div>\n        ),\n        2: (\n            <div>\n                <Typography variant=\"h6\">Array Type</Typography>\n                <br />\n                <div>You can select your initial state of array from the following options</div>\n                <ul>\n                    <li>Random</li>\n                    <li>Increasing</li>\n                    <li>Decreasing</li>\n                    <li>Almost Sorted</li>\n                </ul>\n\n                <div>\n                    To choose an intial state of array, pick an array type from <b>Array Type</b> drop\n                    down menu.\n                </div>\n                <div className=\"center-items\" style={{ marginTop: 10 }}>\n                    {/* <img src={algorithmDropDown} /> */}\n                </div>\n            </div>\n        ),\n        3: (\n            <div>\n                <Typography variant=\"h6\">Array Size</Typography>\n                <br />\n\n                <div>To change array size use the <b>Array Size</b> Slider.</div>\n                <div className=\"center-items\" style={{ marginTop: 10 }}>\n                    {/* <img src={algorithmDropDown} /> */}\n                </div>\n            </div>\n        ),\n        4: (\n            <div>\n                <Typography variant=\"h6\">Animation Speed</Typography>\n                <br />\n\n                <div>To change animation speed use the <b>Animation Speed</b> Slider.</div>\n                <div className=\"center-items\" style={{ marginTop: 10 }}>\n                    {/* <img src={algorithmDropDown} /> */}\n                </div>\n            </div>\n        ),\n        5: (\n            <div>\n                <Typography variant=\"h6\">Visualize</Typography>\n                <br />\n\n                <div>To Visualize the algorithm. Click <b>Sort</b></div>\n                <div className=\"center-items\" style={{ marginTop: 10 }}>\n                    {/* <img src={algorithmDropDown} /> */}\n                </div>\n                <Typography variant=\"h6\">Enjoy the visualization tool :)</Typography>\n            </div>\n        )\n    };\n\n    // @ts-ignore\n    return pages[activeStep];\n};\n\nexport default Info;\n","import React from \"react\";\nimport {\n    createStyles,\n    Theme,\n    withStyles,\n    WithStyles,\n    useTheme,\n    makeStyles\n} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport Info from \"./Info\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            margin: 0,\n            padding: theme.spacing(2)\n        },\n        closeButton: {\n            position: \"absolute\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500]\n        }\n    });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n    id: string;\n    children: React.ReactNode;\n    onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n    const { children, classes, onClose, ...other } = props;\n\n    return (\n        <MuiDialogTitle className={classes.root} disableTypography={true} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2)\n    }\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1)\n    }\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: \"100%\",\n        flexGrow: 1\n    }\n});\n\nexport default function Tutorial() {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const steps = 6;\n\n    return (\n        <div>\n            <Dialog\n                aria-labelledby=\"customized-dialog-title\"\n                fullWidth={true}\n                open={open}\n                onClose={handleClose}\n            >\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Sorting Visualizer\n                </DialogTitle>\n                <DialogContent dividers={true}>\n                    <Info activeStep={activeStep} />\n                </DialogContent>\n                <DialogActions>\n                    <MobileStepper\n                        activeStep={activeStep}\n                        backButton={\n                            <Button disabled={activeStep === 0} size=\"small\" onClick={handleBack}>\n                                {theme.direction === \"rtl\" ? (\n                                    <KeyboardArrowRight />\n                                ) : (\n                                    <KeyboardArrowLeft />\n                                )}\n                                Back\n                            </Button>\n                        }\n                        className={classes.root}\n                        nextButton={\n                            <Button\n                                size=\"small\"\n                                onClick={handleNext}\n                                disabled={activeStep === steps - 1}\n                            >\n                                Next\n                                {theme.direction === \"rtl\" ? (\n                                    <KeyboardArrowLeft />\n                                ) : (\n                                    <KeyboardArrowRight />\n                                )}\n                            </Button>\n                        }\n                        position=\"static\"\n                        steps={steps}\n                        variant=\"dots\"\n                    />\n                    {activeStep === steps - 1 && <Button onClick={handleClose}>Finish</Button>}\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { ReactElement } from \"react\";\nimport { Header } from \"./components/Header\";\nimport { ArrayBlocks } from \"./components/ArrayBlocks\";\nimport { Information } from \"./components/Information\";\nimport Tutorial from \"./Tutorial\";\n\nfunction App(): ReactElement {\n    // Const [isLoading, toggleLoading] = useState(false);\n\n    /*\n     * UseEffect(() => {\n     *     const html = document.querySelector(\"html\");\n     */\n\n    /*\n     *     If (html) {\n     *         let value = \"\";\n     *         const theme = localStorage.getItem(\"theme\");\n     */\n\n    /*\n     *         If (theme === null) {\n     *             value = \"dark\";\n     *             localStorage.setItem(\"theme\", \"dark\");\n     *         } else {\n     *             value = theme;\n     *         }\n     *         html.setAttribute(\"theme\", value);\n     *         toggleLoading(false);\n     *     }\n     * }, []);\n     */\n\n    return (\n        <>\n            <Header />\n            <div className=\"main-blocks\">\n                <Tutorial />\n                <Information />\n                <ArrayBlocks key=\"1\" />\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    GlobalState,\n    GlobalTypes,\n    CHANGE_ARRAY_TYPE,\n    CHANGE_ARRAY_SIZE,\n    CHANGE_ANIMATION_SPEED,\n    SORT_ALGORITHM,\n    PAUSE_EXECUTION\n} from \"../actions/globals/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"Quick Sort\",\n    animationSpeed: 50,\n    arraySize: 50,\n    arrayType: \"Randomize\",\n    sort: false,\n    pause: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_DEFAULT_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_ARRAY_SIZE: {\n            return {\n                ...state,\n                arraySize: action.arraySize\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CHANGE_ARRAY_TYPE: {\n            return {\n                ...state,\n                arrayType: action.arrayType\n            };\n        }\n        case SORT_ALGORITHM: {\n            return {\n                ...state,\n                sort: action.sort\n            };\n        }\n        case PAUSE_EXECUTION: {\n            return {\n                ...state,\n                pause: action.pause\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}