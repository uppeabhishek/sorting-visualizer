{"version":3,"sources":["serviceWorker.ts","Header/Theme.tsx","Header/AlgorithmToggle.tsx","actions/globals/index.ts","actions/globals/types.ts","Header/ArrayTypes.tsx","Header/SizeSlider.tsx","Header/AnimationSlider.tsx","Header/Sort.tsx","Header/GenerateArrayButton.tsx","Header/index.tsx","App.tsx","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Theme","useState","localStorage","getItem","theme","changeThemeState","changeTheme","html","document","querySelector","newTheme","getAttribute","setItem","setAttribute","aria-hidden","className","onClick","AlgorithmToggle","algorithms","useRef","minifiedName","name","defaultAlgorithm","useSelector","state","globals","algorithm","dispatch","useDispatch","current","map","algo","key","title","type","ArrayTypes","SizeSlider","max","min","AnimationSlider","SortButton","GenerateArrayButton","Header","App","isLoading","toggleLoading","useEffect","value","initialState","animationSpeed","arraySize","generate","sortingType","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40f06822.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React, { FunctionComponent, useState } from \"react\";\n\nexport const Theme: FunctionComponent = () => {\n    const [theme, changeThemeState] = useState(localStorage.getItem(\"theme\"));\n\n    const changeTheme = () => {\n        const html = document.querySelector(\"html\");\n\n        if (html) {\n            const currentHTMLtheme = html.getAttribute(\"theme\");\n            let newTheme = \"\";\n\n            if (currentHTMLtheme === \"dark\") {\n                newTheme = \"light\";\n            } else {\n                newTheme = \"dark\";\n            }\n            localStorage.setItem(\"theme\", newTheme);\n            changeThemeState(newTheme);\n            html.setAttribute(\"theme\", newTheme);\n        }\n    };\n\n    return (\n        <div>\n            {theme === \"dark\" ? (\n                <i aria-hidden=\"true\" className=\"fa fa-sun-o\" onClick={changeTheme} />\n            ) : (\n                <i aria-hidden=\"true\" className=\"fa fa-moon-o\" onClick={changeTheme} />\n            )}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../reducers\";\nimport { changeDefaultAlgorithm } from \"../actions/globals\";\n\nexport const AlgorithmToggle: FunctionComponent = () => {\n    const algorithms = useRef([\n        {\n            minifiedName: \"BUB\",\n            name: \"Bubble Sort\"\n        },\n        {\n            minifiedName: \"SEL\",\n            name: \"Selection Sort\"\n        },\n        {\n            minifiedName: \"INS\",\n            name: \"Insertion Sort\"\n        },\n        {\n            minifiedName: \"QUI\",\n            name: \"Quick Sort\"\n        },\n        {\n            minifiedName: \"MER\",\n            name: \"Merge Sort\"\n        }\n    ]);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"algo-toggle d-flex\">\n            {algorithms.current.map((algo: { name: string; minifiedName: string }) =>\n                defaultAlgorithm === algo.name ? (\n                    <div key={algo.name} className=\"selected\" title={algo.name}>\n                        {algo.name}\n                    </div>\n                ) : (\n                    <div\n                        key={algo.name}\n                        title={algo.name}\n                        onClick={() => dispatch(changeDefaultAlgorithm(algo.name))}\n                    >\n                        {algo.minifiedName}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    AlgorithmType,\n    GlobalTypes,\n    ArraySize,\n    CHANGE_ARRAY_SIZE,\n    AnimationSpeed,\n    SortingType,\n    CHANGE_ANIMATION_SPEED,\n    CHANGE_SORTING_TYPE,\n    GENERATE_NEW_ARRAY,\n    GenerateNewArrayType\n} from \"./types\";\n\nexport const changeDefaultAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_DEFAULT_ALGORITHM\n});\n\nexport const changeArraySize = (arraySize: ArraySize): GlobalTypes => ({\n    arraySize,\n    type: CHANGE_ARRAY_SIZE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const changeSortingType = (sortingType: SortingType): GlobalTypes => ({\n    sortingType,\n    type: CHANGE_SORTING_TYPE\n});\n\nexport const generateNewArray = (generate: GenerateNewArrayType): GlobalTypes => ({\n    generate,\n    type: GENERATE_NEW_ARRAY\n});\n","export const CHANGE_DEFAULT_ALGORITHM = \"CHANGE_DEFAULT_ALGORITHM\";\nexport const CHANGE_ARRAY_SIZE = \"CHANGE_ARRAY_SIZE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CHANGE_SORTING_TYPE = \"CHANGE_SORTING_TYPE\";\nexport const GENERATE_NEW_ARRAY = \"GENERATE_NEW_ARRAY\";\n\nexport type AlgorithmType = string;\nexport type ArraySize = number;\nexport type AnimationSpeed = number;\nexport type SortingType = string;\nexport type GenerateNewArrayType = boolean;\n\nexport interface ChangeDefaultAlgorithm {\n    type: typeof CHANGE_DEFAULT_ALGORITHM;\n    algorithm: AlgorithmType;\n}\nexport interface ChangeArraySize {\n    type: typeof CHANGE_ARRAY_SIZE;\n    arraySize: ArraySize;\n}\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\nexport interface ChangeSortingType {\n    type: typeof CHANGE_SORTING_TYPE;\n    sortingType: SortingType;\n}\nexport interface GenerateNewArray {\n    type: typeof GENERATE_NEW_ARRAY;\n    generate: GenerateNewArrayType;\n}\n\nexport type GlobalTypes =\n    | ChangeDefaultAlgorithm\n    | ChangeArraySize\n    | ChangeAnimationSpeed\n    | ChangeSortingType\n    | GenerateNewArray;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    arraySize: ArraySize;\n    animationSpeed: AnimationSpeed;\n    sortingType: SortingType;\n    generate: GenerateNewArrayType;\n}\n","import React, { FunctionComponent } from \"react\";\n\nexport const ArrayTypes: FunctionComponent = () => {\n    const types = [\"Randomize\", \"Almost Sorted\", \"Increasing\", \"Decreasing\"];\n\n    return (\n        <select>\n            {types.map((type) => (\n                <option key={type}>{type}</option>\n            ))}\n        </select>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport const SizeSlider: FunctionComponent = () => (\n    <div>\n        <input max=\"100\" min=\"1\" type=\"range\" />\n        <div>Change Array Size</div>\n    </div>\n);\n","import React, { FunctionComponent } from \"react\";\n\nexport const AnimationSlider: FunctionComponent = () => (\n    <div className=\"d-flex flex-column justify-center align-center\">\n        <div className=\"d-flex justify-center align-center\">\n            <div>Slow</div>\n            <input max=\"100\" min=\"1\" type=\"range\" />\n            <div>Fast</div>\n        </div>\n        <div>Animation Speed</div>\n    </div>\n);\n","import React, { FunctionComponent } from \"react\";\n\nexport const SortButton: FunctionComponent = () => <button type=\"button\">Sort</button>;\n","import React, { FunctionComponent } from \"react\";\n\nexport const GenerateArrayButton: FunctionComponent = () => <button type=\"button\">Generate</button>;\n","import React, { FunctionComponent } from \"react\";\nimport { Theme } from \"./Theme\";\nimport { AlgorithmToggle } from \"./AlgorithmToggle\";\nimport { ArrayTypes } from \"./ArrayTypes\";\nimport { SizeSlider } from \"./SizeSlider\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { SortButton } from \"./Sort\";\nimport { GenerateArrayButton } from \"./GenerateArrayButton\";\n\nexport const Header: FunctionComponent = () => (\n    <header>\n        <AlgorithmToggle />\n        <ArrayTypes />\n        <GenerateArrayButton />\n        <SizeSlider />\n        <AnimationSlider />\n        <SortButton />\n        <Theme />\n    </header>\n);\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Header } from \"./Header\";\n\nfunction App(): ReactElement {\n    const [isLoading, toggleLoading] = useState(true);\n\n    useEffect(() => {\n        const html = document.querySelector(\"html\");\n\n        if (html) {\n            let value = \"\";\n            const theme = localStorage.getItem(\"theme\");\n\n            if (theme === null) {\n                value = \"dark\";\n                localStorage.setItem(\"theme\", \"dark\");\n            } else {\n                value = theme;\n            }\n            html.setAttribute(\"theme\", value);\n            toggleLoading(false);\n        }\n    }, []);\n\n    return !isLoading ? <Header /> : <div />;\n}\n\nexport default App;\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    GlobalState,\n    GlobalTypes,\n    CHANGE_SORTING_TYPE,\n    CHANGE_ARRAY_SIZE,\n    CHANGE_ANIMATION_SPEED,\n    GENERATE_NEW_ARRAY\n} from \"../actions/globals/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"Bubble Sort\",\n    animationSpeed: 10,\n    arraySize: 10,\n    generate: false,\n    sortingType: \"Randomize\"\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_DEFAULT_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_ARRAY_SIZE: {\n            return {\n                ...state,\n                arraySize: action.arraySize\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                arraySize: action.animationSpeed\n            };\n        }\n        case CHANGE_SORTING_TYPE: {\n            return {\n                ...state,\n                sortingType: action.sortingType\n            };\n        }\n        case GENERATE_NEW_ARRAY: {\n            return {\n                ...state,\n                generate: action.generate\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}