{"version":3,"sources":["serviceWorker.ts","actions/globals/types.ts","components/Header/AlgorithmToggle.tsx","actions/globals/index.ts","components/Header/ArrayTypes.tsx","components/Header/SizeSlider.tsx","components/Header/AnimationSlider.tsx","components/Header/Sort.tsx","components/Header/index.tsx","components/ArrayBlocks/index.tsx","hooks/useWindowSize.ts","App.tsx","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AlgorithmToggle","algorithms","useRef","minifiedName","name","defaultAlgorithm","useSelector","state","globals","algorithm","dispatch","useDispatch","key","className","current","map","algo","title","onClick","type","ArrayTypes","arrayType","value","onChange","e","changeArrayType","currentTarget","SizeSlider","arraySize","max","min","changeArraySize","parseInt","AnimationSlider","animationSpeed","changeAnimationSpeed","SortButton","Header","ArrayBlocks","useState","arrayElements","setArrayElements","divisor","minElements","minRange","maxRange","remainingHeightWidth","setRemainingHeightWidth","getRandomArrayElements","array","size","Math","ceil","i","push","floor","random","arrayTypes","Decreasing","sort","a","b","Increasing","Randomize","useEffect","paddingLeftRight","paddingTopBottom","len","length","height","width","eachElementWidth","innerWidth","innerHeight","setSize","onResize","addEventListener","removeEventListener","useWindowSize","header","document","querySelector","offsetHeight","body","style","paddingBottom","paddingLeft","paddingRight","paddingTop","xmlns","eachElement","index","eachElementHeight","fill","fillOpacity","stroke","strokeOpacity","strokeWidth","x","y","App","initialState","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdb4e884.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export const CHANGE_DEFAULT_ALGORITHM = \"CHANGE_DEFAULT_ALGORITHM\";\nexport const CHANGE_ARRAY_SIZE = \"CHANGE_ARRAY_SIZE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CHANGE_ARRAY_TYPE = \"CHANGE_ARRAY_TYPE\";\n\nexport type AlgorithmType = string;\nexport type ArraySize = number;\nexport type AnimationSpeed = number;\nexport type ArrayType = string;\n\nexport interface ChangeDefaultAlgorithm {\n    type: typeof CHANGE_DEFAULT_ALGORITHM;\n    algorithm: AlgorithmType;\n}\nexport interface ChangeArraySize {\n    type: typeof CHANGE_ARRAY_SIZE;\n    arraySize: ArraySize;\n}\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\nexport interface ChangeArrayType {\n    type: typeof CHANGE_ARRAY_TYPE;\n    arrayType: ArrayType;\n}\n\nexport type GlobalTypes =\n    | ChangeDefaultAlgorithm\n    | ChangeArraySize\n    | ChangeAnimationSpeed\n    | ChangeArrayType;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    arraySize: ArraySize;\n    animationSpeed: AnimationSpeed;\n    arrayType: ArrayType;\n}\n","import React, { FunctionComponent, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeDefaultAlgorithm } from \"../../actions/globals\";\n\nexport const AlgorithmToggle: FunctionComponent = () => {\n    const algorithms = useRef([\n        {\n            minifiedName: \"BUB\",\n            name: \"Bubble Sort\"\n        },\n        {\n            minifiedName: \"SEL\",\n            name: \"Selection Sort\"\n        },\n        {\n            minifiedName: \"INS\",\n            name: \"Insertion Sort\"\n        },\n        {\n            minifiedName: \"QUI\",\n            name: \"Quick Sort\"\n        },\n        {\n            minifiedName: \"MER\",\n            name: \"Merge Sort\"\n        }\n    ]);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div key={defaultAlgorithm} className=\"algo-toggle d-flex\">\n            {algorithms.current.map((algo: { name: string; minifiedName: string }) =>\n                defaultAlgorithm === algo.name ? (\n                    <div key={algo.name} className=\"selected\" title={algo.name}>\n                        {algo.name}\n                    </div>\n                ) : (\n                    <div\n                        key={algo.name}\n                        title={algo.name}\n                        onClick={() => dispatch(changeDefaultAlgorithm(algo.name))}\n                    >\n                        {algo.minifiedName}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    AlgorithmType,\n    GlobalTypes,\n    ArraySize,\n    CHANGE_ARRAY_SIZE,\n    AnimationSpeed,\n    ArrayType,\n    CHANGE_ANIMATION_SPEED,\n    CHANGE_ARRAY_TYPE\n} from \"./types\";\n\nexport const changeDefaultAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_DEFAULT_ALGORITHM\n});\n\nexport const changeArraySize = (arraySize: ArraySize): GlobalTypes => ({\n    arraySize,\n    type: CHANGE_ARRAY_SIZE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const changeArrayType = (arrayType: ArrayType): GlobalTypes => ({\n    arrayType,\n    type: CHANGE_ARRAY_TYPE\n});\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeArrayType } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const ArrayTypes: FunctionComponent = () => {\n    const types = [\"Randomize\", \"Almost Sorted\", \"Increasing\", \"Decreasing\"];\n\n    const dispatch = useDispatch();\n\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n\n    function changeArrayTypeFunc(e: ChangeEvent<HTMLSelectElement>) {\n        dispatch(changeArrayType(e.currentTarget.value));\n    }\n\n    return (\n        <select key={arrayType} value={arrayType} onChange={changeArrayTypeFunc}>\n            {types.map((type) => (\n                <option key={type}>{type}</option>\n            ))}\n        </select>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeArraySize } from \"../../actions/globals\";\n\nexport const SizeSlider: FunctionComponent = () => {\n    const arraySize = useSelector((state: RootState) => state.globals.arraySize);\n\n    const dispatch = useDispatch();\n\n    function changeArraySizeFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeArraySize(parseInt(e.currentTarget.value, 10)));\n    }\n\n    return (\n        <div>\n            <input\n                max=\"100\"\n                min=\"1\"\n                type=\"range\"\n                value={arraySize}\n                onChange={changeArraySizeFunc}\n            />\n            <div>Change Array Size</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeAnimationSpeed } from \"../../actions/globals\";\n\nexport const AnimationSlider: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    function changeAnimationSpeedFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeAnimationSpeed(parseInt(e.currentTarget.value, 10)));\n    }\n\n    return (\n        <div className=\"d-flex flex-column justify-center align-center\">\n            <div className=\"d-flex justify-center align-center\">\n                <div>Slow</div>\n                <input\n                    max=\"100\"\n                    min=\"1\"\n                    type=\"range\"\n                    value={animationSpeed}\n                    onChange={changeAnimationSpeedFunc}\n                />\n                <div>Fast</div>\n            </div>\n            <div>Animation Speed</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport const SortButton: FunctionComponent = () => <button type=\"button\">Sort</button>;\n","import React, { FunctionComponent } from \"react\";\nimport { AlgorithmToggle } from \"./AlgorithmToggle\";\nimport { ArrayTypes } from \"./ArrayTypes\";\nimport { SizeSlider } from \"./SizeSlider\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { SortButton } from \"./Sort\";\n\nexport const Header: FunctionComponent = () => (\n    <header>\n        <AlgorithmToggle />\n        <ArrayTypes />\n        <SizeSlider />\n        <AnimationSlider />\n        <SortButton />\n    </header>\n);\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\n\nexport const ArrayBlocks: FunctionComponent = () => {\n    // Don't destructure as destructing will cause the whole object to rerender\n\n    /*\n     * Const algorithm = useSelector((state: RootState)=> state.globals.algorithm);\n     * const animationSpeed = useSelector((state: RootState)=> state.globals.animationSpeed);\n     */\n    let arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n\n    const [arrayElements, setArrayElements] = useState([]);\n\n    const divisor = useRef(2);\n\n    const minElements = useRef(2);\n\n    const minRange = useRef(1);\n\n    const maxRange = useRef(100);\n\n    const [remainingHeightWidth, setRemainingHeightWidth] = useState([0, 0]);\n\n    function getRandomInt(min: number, max: number) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n\n        return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\n    }\n\n    function getRandomArrayElements() {\n        const array: number[] = [];\n\n        const { current } = minElements;\n\n        if (arraySize < current) {\n            arraySize = current;\n        }\n        const size = Math.ceil(arraySize / divisor.current);\n\n        for (let i = 0; i < size; i++) {\n            array.push(getRandomInt(minRange.current, maxRange.current));\n        }\n\n        return array;\n    }\n\n    function arrayTypes(type: string) {\n        const dict = {\n            \"Almost Sorted\": function () {\n                return getRandomArrayElements();\n            },\n            Decreasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return b - a;\n                });\n            },\n            Increasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return a - b;\n                });\n            },\n            Randomize() {\n                return getRandomArrayElements();\n            }\n        };\n\n        // @ts-ignore\n        return dict[type]();\n    }\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arraySize]);\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arrayType]);\n\n    const paddingLeftRight = useRef(80);\n\n    const paddingTopBottom = useRef(40);\n\n    const len = arrayElements.length;\n\n    // Subtract top and bottom margin\n    const height = remainingHeightWidth[0] - paddingTopBottom.current * 2;\n\n    // Subtract left and right margin\n    const width = remainingHeightWidth[1] - paddingLeftRight.current * 2;\n\n    const eachElementWidth = width / len;\n\n    const [innerWidth, innerHeight] = useWindowSize();\n\n    useEffect(() => {\n        const header = document.querySelector(\"header\");\n\n        if (header) {\n            setRemainingHeightWidth([innerHeight - header.offsetHeight, innerWidth]);\n        }\n    }, [innerWidth, innerHeight]);\n\n    useEffect(() => {\n        const header = document.querySelector(\"header\");\n        const body = document.querySelector(\"body\");\n\n        if (header && body) {\n            setRemainingHeightWidth([innerHeight - header.offsetHeight, innerWidth]);\n        }\n    }, []);\n\n    return remainingHeightWidth[0] !== 0 ? (\n        <svg\n            height={height}\n            style={{\n                paddingBottom: paddingTopBottom.current,\n                paddingLeft: paddingLeftRight.current,\n                paddingRight: paddingLeftRight.current,\n                paddingTop: paddingTopBottom.current\n            }}\n            width={width}\n            xmlns=\"http://www.w3.org/2000/svg\"\n        >\n            {arrayElements.map((eachElement: number, index: number) => {\n                const eachElementHeight = (eachElement * height) / maxRange.current;\n\n                return (\n                    <g key={index}>\n                        <rect\n                            height={eachElementHeight}\n                            style={{\n                                fill: \"blue\",\n                                fillOpacity: 0.1,\n                                stroke: \"pink\",\n                                strokeOpacity: 0.9,\n                                strokeWidth: 5\n                            }}\n                            width={eachElementWidth}\n                            x={index * eachElementWidth}\n                            y={height - eachElementHeight}\n                        />\n                        <text\n                            style={{ fill: \"white\" }}\n                            x={index * eachElementWidth + eachElementWidth / 2}\n                            y={height - eachElementHeight + 50}\n                        >\n                            {eachElement}\n                        </text>\n                    </g>\n                );\n            })}\n        </svg>\n    ) : (\n        <div />\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowSize(): number[] {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n\n    useEffect(() => {\n        function onResize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener(\"resize\", onResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", onResize);\n        };\n    }, []);\n\n    return size;\n}\n","import React, { ReactElement } from \"react\";\nimport { Header } from \"./components/Header\";\nimport { ArrayBlocks } from \"./components/ArrayBlocks\";\n\nfunction App(): ReactElement {\n    // Const [isLoading, toggleLoading] = useState(false);\n\n    /*\n     * UseEffect(() => {\n     *     const html = document.querySelector(\"html\");\n     */\n\n    /*\n     *     If (html) {\n     *         let value = \"\";\n     *         const theme = localStorage.getItem(\"theme\");\n     */\n\n    /*\n     *         If (theme === null) {\n     *             value = \"dark\";\n     *             localStorage.setItem(\"theme\", \"dark\");\n     *         } else {\n     *             value = theme;\n     *         }\n     *         html.setAttribute(\"theme\", value);\n     *         toggleLoading(false);\n     *     }\n     * }, []);\n     */\n\n    return (\n        <>\n            <Header />\n            <ArrayBlocks key=\"1\" />\n        </>\n    );\n}\n\nexport default App;\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    GlobalState,\n    GlobalTypes,\n    CHANGE_ARRAY_TYPE,\n    CHANGE_ARRAY_SIZE,\n    CHANGE_ANIMATION_SPEED\n} from \"../actions/globals/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"Bubble Sort\",\n    animationSpeed: 10,\n    arraySize: 10,\n    arrayType: \"Randomize\"\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_DEFAULT_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_ARRAY_SIZE: {\n            return {\n                ...state,\n                arraySize: action.arraySize\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CHANGE_ARRAY_TYPE: {\n            return {\n                ...state,\n                arrayType: action.arrayType\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}