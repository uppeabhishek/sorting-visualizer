{"version":3,"sources":["serviceWorker.ts","actions/globals/types.ts","actions/globals/index.ts","components/Header/AlgorithmToggle.tsx","components/Header/ArrayTypes.tsx","components/Header/SizeSlider.tsx","components/Header/AnimationSlider.tsx","components/Header/Sort.tsx","components/Header/index.tsx","commonUtilities.ts","algorithms/BubbleSort.ts","algorithms/SelectionSort.ts","algorithms/InsertionSort.ts","algorithms/MergeSort.ts","algorithms/QuickSort.ts","components/ArrayBlocks/index.tsx","hooks/useWindowSize.ts","components/Information/index.tsx","App.tsx","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","sortAlgorithm","sort","type","AlgorithmToggle","algorithms","useRef","minifiedName","name","defaultAlgorithm","useSelector","state","globals","algorithm","isSorting","dispatch","useDispatch","key","className","current","map","algo","title","onClick","ArrayTypes","arrayType","value","onChange","e","changeArrayType","currentTarget","SizeSlider","arraySize","max","min","style","cursor","changeArraySize","parseInt","AnimationSlider","animationSpeed","changeAnimationSpeed","SortButton","Header","reload","timer","ms","Promise","res","setTimeout","getRandom","mi","Math","ceil","ma","floor","random","fillColor","svgChildren","index","color","children","fill","swapSVGNodes","svgChildren1","svgChildren2","parentNode","firstChild","secondChild","nextSibling","insertBefore","first","transform","baseVal","getItem","firstX","firstY","SVGTransform","SVG_TRANSFORM_TRANSLATE","matrix","f","second","secondX","secondY","setTranslate","arr","func","a","then","catch","err","i","len","j","length","minRect","minIndex","currentRect","currentElement","currentSVGElement","currentElementIndex","array","MergeHelper","MergeSortHelper","low","high","mid","console","log","firstSize","secondSize","firstArray","Array","secondArray","k","firstRect","secondRect","ParitionHelper","QuickSortHelper","pivotIndex","currentIndex","ArrayBlocks","useState","arrayElements","setArrayElements","divisor","minElements","minRange","maxRange","remainingHeightWidth","setRemainingHeightWidth","getRandomArrayElements","size","push","almostSortElements","si","ei","sortedElements","temp","rI","shuffle","arrayTypes","b","Decreasing","Increasing","Randomize","useEffect","marginLeftRight","marginTopBottom","height","eachElementWidth","innerWidth","innerHeight","setSize","onResize","addEventListener","removeEventListener","useWindowSize","item","document","querySelector","clientHeight","clientWidth","svgRef","BubbleSort","ele","SelectionSort","InsertionSort","MergeSort","QuickSort","marginTop","marginBottom","marginLeft","marginRight","toString","ref","width","xmlns","eachElement","eachElementHeight","stroke","strokeOpacity","strokeWidth","alignmentBaseline","textAnchor","x","y","Information","Bar","backgroundColor","App","initialState","pause","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a2dd7594.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export const CHANGE_DEFAULT_ALGORITHM = \"CHANGE_DEFAULT_ALGORITHM\";\nexport const CHANGE_ARRAY_SIZE = \"CHANGE_ARRAY_SIZE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CHANGE_ARRAY_TYPE = \"CHANGE_ARRAY_TYPE\";\nexport const SORT_ALGORITHM = \"SORT_ALGORITHM\";\nexport const PAUSE_EXECUTION = \"PAUSE_EXECUTION\";\n\nexport type AlgorithmType = string;\nexport type ArraySize = number;\nexport type AnimationSpeed = number;\nexport type ArrayType = string;\nexport type SortAlgorithm = boolean;\nexport type PauseExecution = boolean;\n\nexport interface ChangeDefaultAlgorithm {\n    type: typeof CHANGE_DEFAULT_ALGORITHM;\n    algorithm: AlgorithmType;\n}\nexport interface ChangeArraySize {\n    type: typeof CHANGE_ARRAY_SIZE;\n    arraySize: ArraySize;\n}\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\nexport interface ChangeArrayType {\n    type: typeof CHANGE_ARRAY_TYPE;\n    arrayType: ArrayType;\n}\n\nexport interface SortAlgorithmType {\n    type: typeof SORT_ALGORITHM;\n    sort: SortAlgorithm;\n}\n\nexport interface PauseExecutionType {\n    type: typeof PAUSE_EXECUTION;\n    pause: PauseExecution;\n}\n\nexport type GlobalTypes =\n    | ChangeDefaultAlgorithm\n    | ChangeArraySize\n    | ChangeAnimationSpeed\n    | ChangeArrayType\n    | SortAlgorithmType\n    | PauseExecutionType;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    arraySize: ArraySize;\n    animationSpeed: AnimationSpeed;\n    arrayType: ArrayType;\n    sort: SortAlgorithm;\n    pause: PauseExecution;\n}\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    AlgorithmType,\n    GlobalTypes,\n    ArraySize,\n    CHANGE_ARRAY_SIZE,\n    AnimationSpeed,\n    ArrayType,\n    CHANGE_ANIMATION_SPEED,\n    CHANGE_ARRAY_TYPE,\n    SortAlgorithm,\n    SORT_ALGORITHM,\n    PAUSE_EXECUTION,\n    PauseExecution\n} from \"./types\";\n\nexport const changeDefaultAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_DEFAULT_ALGORITHM\n});\n\nexport const changeArraySize = (arraySize: ArraySize): GlobalTypes => ({\n    arraySize,\n    type: CHANGE_ARRAY_SIZE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const changeArrayType = (arrayType: ArrayType): GlobalTypes => ({\n    arrayType,\n    type: CHANGE_ARRAY_TYPE\n});\n\nexport const sortAlgorithm = (sort: SortAlgorithm): GlobalTypes => ({\n    sort,\n    type: SORT_ALGORITHM\n});\n\nexport const pauseExecution = (pause: PauseExecution): GlobalTypes => ({\n    pause,\n    type: PAUSE_EXECUTION\n});\n","import React, { FunctionComponent, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeDefaultAlgorithm } from \"../../actions/globals\";\n\nexport const AlgorithmToggle: FunctionComponent = () => {\n    const algorithms = useRef([\n        {\n            minifiedName: \"QUI\",\n            name: \"Quick Sort\"\n        },\n        {\n            minifiedName: \"BUB\",\n            name: \"Bubble Sort\"\n        },\n        {\n            minifiedName: \"SEL\",\n            name: \"Selection Sort\"\n        },\n        {\n            minifiedName: \"INS\",\n            name: \"Insertion Sort\"\n        },\n        {\n            minifiedName: \"MER\",\n            name: \"Merge Sort\"\n        }\n    ]);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div\n            key={defaultAlgorithm}\n            className={isSorting ? \"disabled algo-toggle d-flex\" : \"algo-toggle d-flex\"}\n        >\n            {algorithms.current.map((algo: { name: string; minifiedName: string }) =>\n                defaultAlgorithm === algo.name ? (\n                    <div key={algo.name} className=\"selected\" title={algo.name}>\n                        {algo.name}\n                    </div>\n                ) : (\n                    <div\n                        key={algo.name}\n                        title={algo.name}\n                        onClick={() => dispatch(changeDefaultAlgorithm(algo.name))}\n                    >\n                        {algo.minifiedName}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeArrayType } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const ArrayTypes: FunctionComponent = () => {\n    const types = [\"Randomize\", \"Almost Sorted\", \"Increasing\", \"Decreasing\"];\n\n    const dispatch = useDispatch();\n\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    function changeArrayTypeFunc(e: ChangeEvent<HTMLSelectElement>) {\n        dispatch(changeArrayType(e.currentTarget.value));\n    }\n\n    return (\n        <div>\n            <div>Select Array Type</div>\n            <select\n                key={arrayType}\n                className={isSorting ? \"disabled\" : \"\"}\n                value={arrayType}\n                onChange={changeArrayTypeFunc}\n            >\n                {types.map((type) => (\n                    <option key={type}>{type}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeArraySize } from \"../../actions/globals\";\n\nexport const SizeSlider: FunctionComponent = () => {\n    const arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    function changeArraySizeFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeArraySize(parseInt(e.currentTarget.value, 10)));\n    }\n\n    return (\n        <div>\n            <div>Change Array Size</div>\n            <input\n                className={isSorting ? \"disabled\" : \"\"}\n                max=\"100\"\n                min=\"1\"\n                style={{ cursor: \"pointer\" }}\n                type=\"range\"\n                value={arraySize}\n                onChange={changeArraySizeFunc}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent, ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { changeAnimationSpeed } from \"../../actions/globals\";\n\nexport const AnimationSlider: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    function changeAnimationSpeedFunc(e: ChangeEvent<HTMLInputElement>) {\n        dispatch(changeAnimationSpeed(parseInt(e.currentTarget.value, 10)));\n    }\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    return (\n        <div\n            className={\n                isSorting\n                    ? \"disabled d-flex flex-column justify-center align-center\"\n                    : \"d-flex flex-column justify-center align-center\"\n            }\n        >\n            <div>Animation Speed</div>\n            <div className=\"d-flex justify-center align-center\">\n                <div>Slow</div>\n                <input\n                    max=\"90\"\n                    min=\"10\"\n                    style={{ cursor: \"pointer\" }}\n                    type=\"range\"\n                    value={animationSpeed}\n                    onChange={changeAnimationSpeedFunc}\n                />\n                <div>Fast</div>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sortAlgorithm } from \"../../actions/globals\";\nimport { RootState } from \"../../reducers\";\n\nexport const SortButton: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    return (\n        <button\n            className={isSorting ? \"disabled\" : \"\"}\n            type=\"button\"\n            onClick={() => dispatch(sortAlgorithm(true))}\n        >\n            Sort\n        </button>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { AlgorithmToggle } from \"./AlgorithmToggle\";\nimport { ArrayTypes } from \"./ArrayTypes\";\nimport { SizeSlider } from \"./SizeSlider\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { SortButton } from \"./Sort\";\n\n// Import { Controls } from \"../Controls\";\n\nexport const Header: FunctionComponent = () => (\n    <header>\n        <div className=\"title\" onClick={() => window.location.reload()}>\n            Sorting Visualizer\n        </div>\n        <AlgorithmToggle />\n        <ArrayTypes />\n        <SizeSlider />\n        <AnimationSlider />\n        <SortButton />\n        {/* <Controls /> */}\n    </header>\n);\n","export const arrayItemOriginalColor = \"#251b12\";\nexport const arrayItemCurrentPositionColor = \"blue\";\nexport const arrayItemNotEqualColor = \"red\";\nexport const arrayItemEqualColor = \"green\";\nexport const arrayItemSortedColor = \"hotpink\";\n\nexport function timer(ms: number) {\n    return new Promise((res) => setTimeout(res, ms));\n}\n\nexport function getRandom(min: number, max: number): number {\n    const mi = Math.ceil(min);\n    const ma = Math.floor(max);\n\n    // The maximum is exclusive and the minimum is inclusive\n    return Math.floor(Math.random() * (ma - mi + 1)) + mi;\n}\n\nexport function fillColor(\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    index: number,\n    color: string\n) {\n    const rect = svgChildren[index].children as HTMLCollectionOf<SVGRectElement | SVGTextElement>;\n\n    rect[0].style.fill = color;\n}\n\nexport function shuffle(arr: Array<any>) {\n    const le = arr.length;\n\n    for (let i = le - 1; i > 0; i--) {\n        const rI = getRandom(0, i - 1);\n\n        [arr[i], arr[rI]] = [arr[rI], arr[i]];\n    }\n\n    return arr;\n}\n\nexport function swapSVGNodes(svgChildren1: SVGGElement, svgChildren2: SVGGElement) {\n    const { parentNode } = svgChildren1;\n\n    const firstChild = svgChildren1;\n    const secondChild = svgChildren2;\n    const { nextSibling } = svgChildren2;\n\n    if (parentNode) {\n        parentNode.insertBefore(secondChild, firstChild);\n        parentNode.insertBefore(firstChild, nextSibling);\n    }\n\n    const first = svgChildren1.transform.baseVal.getItem(0);\n    let firstX = 0;\n    let firstY = 0;\n\n    if (first.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        firstX = first.matrix.e;\n        firstY = first.matrix.f;\n    }\n\n    const second = svgChildren2.transform.baseVal.getItem(0);\n    let secondX = 0;\n    let secondY = 0;\n\n    if (second.type === SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n        secondX = second.matrix.e;\n        secondY = second.matrix.f;\n    }\n\n    svgChildren2.transform.baseVal.getItem(0).setTranslate(firstX, secondY);\n    svgChildren1.transform.baseVal.getItem(0).setTranslate(secondX, firstY);\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function BubbleSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    /*\n     * Let isSwapped = false;\n     */\n    async function sort() {\n        for (let i = 0; i < len; i++) {\n            for (let j = 0; j < len - i - 1; j++) {\n                // Indicate these cells are currently being sorted\n                fillColor(svgChildren, j, arrayItemCurrentPositionColor);\n                fillColor(svgChildren, j + 1, arrayItemCurrentPositionColor);\n\n                await timer(animationSpeed);\n\n                if (arr[j] > arr[j + 1]) {\n                    // If they are not in correct position\n                    fillColor(svgChildren, j, arrayItemNotEqualColor);\n                    fillColor(svgChildren, j + 1, arrayItemNotEqualColor);\n\n                    await timer(animationSpeed);\n\n                    // IsSwapped = true;\n                    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\n                    // Swap SVG Elements;\n                    swapSVGNodes(svgChildren[j], svgChildren[j + 1]);\n                } else {\n                    // If elements are in correct position\n                    fillColor(svgChildren, j, arrayItemEqualColor);\n                    fillColor(svgChildren, j + 1, arrayItemEqualColor);\n\n                    await timer(animationSpeed);\n                }\n\n                fillColor(svgChildren, j, arrayItemOriginalColor);\n                fillColor(svgChildren, j + 1, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n            }\n\n            fillColor(svgChildren, len - i - 1, arrayItemSortedColor);\n        }\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function SelectionSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    async function sort() {\n        let i;\n\n        for (i = 0; i < len - 1; i++) {\n            let min = arr[i];\n            let minIndex = i;\n\n            let minRect = svgChildren[minIndex].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            minRect[0].style.fill = arrayItemEqualColor;\n\n            for (let j = i + 1; j < len; j++) {\n                const currentRect = svgChildren[j].children as HTMLCollectionOf<\n                    SVGRectElement | SVGTextElement\n                >;\n\n                currentRect[0].style.fill = arrayItemCurrentPositionColor;\n\n                await timer(animationSpeed);\n\n                if (arr[j] < min) {\n                    // Current Min Element\n                    minRect[0].style.fill = arrayItemOriginalColor;\n                    currentRect[0].style.fill = arrayItemEqualColor;\n                    minRect = currentRect;\n\n                    min = arr[j];\n                    minIndex = j;\n                } else {\n                    currentRect[0].style.fill = arrayItemOriginalColor;\n                }\n                await timer(animationSpeed);\n            }\n\n            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n\n            swapSVGNodes(svgChildren[i], svgChildren[minIndex]);\n\n            const firstRect = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            firstRect[0].style.fill = arrayItemSortedColor;\n\n            await timer(animationSpeed);\n        }\n\n        // Paint last element as sorted\n        fillColor(svgChildren, i, arrayItemSortedColor);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function InsertionSort(\n    arr: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = arr.length;\n\n    async function sort() {\n        const minElement = svgChildren[0].children as HTMLCollectionOf<\n            SVGRectElement | SVGTextElement\n        >;\n\n        minElement[0].style.fill = arrayItemEqualColor;\n\n        await timer(animationSpeed);\n\n        let i;\n\n        for (i = 1; i < len; i++) {\n            let currentElement = arr[i];\n            let currentElementIndex = i;\n\n            let currentSVGElement = svgChildren[currentElementIndex].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            for (let j = 0; j <= i; j++) {\n                currentSVGElement[0].style.fill = arrayItemCurrentPositionColor;\n\n                fillColor(svgChildren, j, arrayItemCurrentPositionColor);\n\n                await timer(animationSpeed);\n\n                if (currentElement < arr[j]) {\n                    currentSVGElement[0].style.fill = arrayItemNotEqualColor;\n\n                    fillColor(svgChildren, j, arrayItemNotEqualColor);\n\n                    await timer(animationSpeed);\n\n                    [arr[j], arr[currentElementIndex]] = [arr[currentElementIndex], arr[j]];\n\n                    currentElement = arr[i];\n\n                    swapSVGNodes(svgChildren[j], svgChildren[currentElementIndex]);\n\n                    currentSVGElement[0].style.fill = arrayItemOriginalColor;\n\n                    fillColor(svgChildren, j, arrayItemOriginalColor);\n\n                    await timer(animationSpeed);\n\n                    currentSVGElement = svgChildren[i].children as HTMLCollectionOf<\n                        SVGRectElement | SVGTextElement\n                    >;\n                    currentElementIndex = i;\n                } else {\n                    fillColor(svgChildren, j, arrayItemEqualColor);\n\n                    await timer(animationSpeed);\n\n                    currentSVGElement[0].style.fill = arrayItemOriginalColor;\n\n                    fillColor(svgChildren, j, arrayItemOriginalColor);\n\n                    await timer(animationSpeed);\n                }\n            }\n        }\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes\n} from \"../commonUtilities\";\n\nexport async function MergeSort(\n    array: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = array.length;\n\n    async function MergeHelper(array: Array<number>, low: number, mid: number, high: number) {\n        console.log(low, mid, high);\n\n        const firstSize = mid - low + 1;\n        const secondSize = high - mid;\n\n        const firstArray = new Array(firstSize);\n        const secondArray = new Array(secondSize);\n\n        for (let i = 0; i < firstSize; i++) {\n            firstArray[i] = array[low + i];\n        }\n\n        for (let i = 0; i < secondSize; i++) {\n            secondArray[i] = array[mid + i + 1];\n        }\n\n        let i = 0;\n        let j = 0;\n        let k = low;\n\n        while (i < firstSize && j < secondSize) {\n            const first = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            const second = svgChildren[j].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n\n            const firstRect = first[0];\n            const secondRect = second[0];\n\n            // Indicate these cells are currently being sorted\n            firstRect.style.fill = arrayItemCurrentPositionColor;\n            secondRect.style.fill = arrayItemCurrentPositionColor;\n\n            await timer(animationSpeed);\n\n            if (firstArray[i] <= secondArray[j]) {\n                // Indicate these cells are currently being sorted\n                firstRect.style.fill = arrayItemNotEqualColor;\n                secondRect.style.fill = arrayItemNotEqualColor;\n\n                await timer(animationSpeed);\n\n                // SwapSVGNodes(svgChildren[i], svgChildren[k]);\n\n                array[k++] = firstArray[i];\n                i += 1;\n            } else {\n                // Indicate these cells are currently being sorted\n                firstRect.style.fill = arrayItemEqualColor;\n                secondRect.style.fill = arrayItemEqualColor;\n\n                await timer(animationSpeed);\n\n                // SwapSVGNodes(svgChildren[j], svgChildren[k]);\n\n                array[k++] = secondArray[j];\n                j += 1;\n            }\n        }\n\n        while (i < firstSize) {\n            const first = svgChildren[i].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n            const firstRect = first[0];\n\n            // SwapSVGNodes(svgChildren[i], svgChildren[k]);\n            firstRect.style.fill = arrayItemEqualColor;\n\n            await timer(animationSpeed);\n\n            array[k++] = firstArray[i];\n            i += 1;\n        }\n\n        while (j < secondSize) {\n            const first = svgChildren[j].children as HTMLCollectionOf<\n                SVGRectElement | SVGTextElement\n            >;\n            const firstRect = first[0];\n\n            firstRect.style.fill = arrayItemEqualColor;\n\n            await timer(animationSpeed);\n\n            // SwapSVGNodes(svgChildren[j], svgChildren[k]);\n            array[k++] = secondArray[j];\n            j += 1;\n        }\n    }\n\n    async function MergeSortHelper(array: Array<number>, low: number, high: number) {\n        if (low >= high) {\n            return;\n        }\n        const mid = Math.floor(low + (high - low) / 2);\n\n        await MergeSortHelper(array, low, mid);\n        await MergeSortHelper(array, mid + 1, high);\n        await MergeHelper(array, low, mid, high);\n    }\n\n    async function sort() {\n        await MergeSortHelper(array, 0, len - 1);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import {\n    timer,\n    arrayItemOriginalColor,\n    arrayItemNotEqualColor,\n    arrayItemCurrentPositionColor,\n    arrayItemEqualColor,\n    swapSVGNodes,\n    fillColor\n} from \"../commonUtilities\";\n\nexport async function QuickSort(\n    array: number[],\n    svgChildren: HTMLCollectionOf<SVGGElement>,\n    animationSpeed: number\n) {\n    const len = array.length;\n\n    async function ParitionHelper(array: number[], low: number, high: number) {\n        const pivotIndex = high;\n\n        let currentIndex = low;\n\n        fillColor(svgChildren, pivotIndex, arrayItemCurrentPositionColor);\n\n        for (let i = low; i < high; i++) {\n            fillColor(svgChildren, i, arrayItemCurrentPositionColor);\n            fillColor(svgChildren, currentIndex, arrayItemCurrentPositionColor);\n\n            await timer(animationSpeed);\n\n            if (array[i] < array[pivotIndex]) {\n                fillColor(svgChildren, i, arrayItemNotEqualColor);\n                fillColor(svgChildren, currentIndex, arrayItemNotEqualColor);\n\n                await timer(animationSpeed);\n\n                swapSVGNodes(svgChildren[currentIndex], svgChildren[i]);\n\n                [array[i], array[currentIndex]] = [array[currentIndex], array[i]];\n\n                fillColor(svgChildren, i, arrayItemOriginalColor);\n                fillColor(svgChildren, currentIndex, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n\n                currentIndex++;\n            } else {\n                fillColor(svgChildren, i, arrayItemEqualColor);\n                fillColor(svgChildren, currentIndex, arrayItemEqualColor);\n\n                await timer(animationSpeed);\n\n                fillColor(svgChildren, i, arrayItemOriginalColor);\n                fillColor(svgChildren, currentIndex, arrayItemOriginalColor);\n\n                await timer(animationSpeed);\n            }\n            await timer(animationSpeed);\n        }\n\n        fillColor(svgChildren, pivotIndex, arrayItemOriginalColor);\n\n        await timer(animationSpeed);\n\n        swapSVGNodes(svgChildren[currentIndex], svgChildren[pivotIndex]);\n\n        [array[pivotIndex], array[currentIndex]] = [array[currentIndex], array[pivotIndex]];\n\n        return currentIndex;\n    }\n\n    async function QuickSortHelper(array: number[], low: number, high: number) {\n        if (low >= high) {\n            return;\n        }\n\n        const pivotIndex = await ParitionHelper(array, low, high);\n\n        await QuickSortHelper(array, low, pivotIndex - 1);\n        await QuickSortHelper(array, pivotIndex + 1, high);\n    }\n\n    async function sort() {\n        await QuickSortHelper(array, 0, len - 1);\n    }\n\n    function func() {\n        return sort()\n            .then(() => true)\n            .catch((err) => err);\n    }\n\n    return func();\n}\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { BubbleSort } from \"../../algorithms/BubbleSort\";\nimport { SelectionSort } from \"../../algorithms/SelectionSort\";\nimport { getRandom, shuffle, arrayItemOriginalColor } from \"../../commonUtilities\";\n\nimport { sortAlgorithm } from \"../../actions/globals\";\nimport { InsertionSort } from \"../../algorithms/InsertionSort\";\nimport { MergeSort } from \"../../algorithms/MergeSort\";\nimport { QuickSort } from \"../../algorithms/QuickSort\";\n\nexport const ArrayBlocks: FunctionComponent = () => {\n    let arraySize = useSelector((state: RootState) => state.globals.arraySize);\n    const arrayType = useSelector((state: RootState) => state.globals.arrayType);\n\n    const [arrayElements, setArrayElements] = useState([]);\n\n    const divisor = useRef(2);\n\n    const minElements = useRef(2);\n\n    const minRange = useRef(1);\n\n    const maxRange = useRef(100);\n\n    const [remainingHeightWidth, setRemainingHeightWidth] = useState([0, 0]);\n\n    function getRandomArrayElements() {\n        const array: number[] = [];\n\n        const { current } = minElements;\n\n        if (arraySize < current) {\n            arraySize = current;\n        }\n        const size = Math.ceil(arraySize / divisor.current);\n\n        for (let i = 0; i < size; i++) {\n            array.push(getRandom(minRange.current, maxRange.current));\n        }\n\n        return array;\n    }\n\n    function almostSortElements(si: number, ei: number, sortedElements: Array<number>) {\n        let temp = [];\n\n        for (let i = si; i < ei; i++) {\n            temp.push(sortedElements[i]);\n        }\n\n        temp = shuffle(temp);\n\n        let index = 0;\n\n        for (let i = si; i < ei; i++) {\n            sortedElements[i] = temp[index++];\n        }\n    }\n\n    function arrayTypes(type: string) {\n        const dict = {\n            \"Almost Sorted\": function () {\n                let sortedElements;\n\n                if (getRandom(0, 1) === 0) {\n                    sortedElements = getRandomArrayElements().sort(function (a, b) {\n                        return a - b;\n                    });\n                } else {\n                    sortedElements = getRandomArrayElements().sort(function (a, b) {\n                        return b - a;\n                    });\n                }\n\n                almostSortElements(0, Math.floor(sortedElements.length / 6), sortedElements);\n\n                almostSortElements(\n                    Math.ceil(sortedElements.length / 1.25),\n                    sortedElements.length,\n                    sortedElements\n                );\n\n                return sortedElements;\n            },\n            Decreasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return b - a;\n                });\n            },\n            Increasing() {\n                return getRandomArrayElements().sort(function (a, b) {\n                    return a - b;\n                });\n            },\n            Randomize() {\n                return getRandomArrayElements();\n            }\n        };\n\n        // @ts-ignore\n        return dict[type]();\n    }\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arraySize]);\n\n    useEffect(() => {\n        setArrayElements(arrayTypes(arrayType));\n    }, [arrayType]);\n\n    const marginLeftRight = useRef(20);\n\n    const marginTopBottom = useRef(20);\n\n    const len = arrayElements.length;\n\n    // Subtract top and bottom margin\n    const height = remainingHeightWidth[0] - marginTopBottom.current * 2;\n\n    // Subtract left and right margin\n    const width = remainingHeightWidth[1] - marginLeftRight.current * 2;\n\n    const eachElementWidth = width / len;\n\n    const [innerWidth, innerHeight] = useWindowSize();\n\n    useEffect(() => {\n        const item = document.querySelector(\".svg-block\") as HTMLElement;\n\n        if (item) {\n            setRemainingHeightWidth([item.clientHeight, item.clientWidth]);\n        }\n    }, [innerWidth, innerHeight]);\n\n    useEffect(() => {\n        const item = document.querySelector(\".svg-block\") as HTMLElement;\n\n        if (item) {\n            setRemainingHeightWidth([item.clientHeight, item.clientWidth]);\n        }\n    }, []);\n\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    const isSorting = useSelector((state: RootState) => state.globals.sort);\n\n    const dispatch = useDispatch();\n\n    let animationSpeed = useSelector((state: RootState) => state.globals.animationSpeed);\n\n    // As animationSpeed increase decrease its value because slow ---> fast\n    animationSpeed = 10 * (100 - animationSpeed);\n\n    const defaultAlgorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    useEffect(() => {\n        if (isSorting && svgRef) {\n            // @ts-ignore\n            let svgChildren: HTMLCollectionOf<SVGGElement> = null;\n\n            if (svgRef.current) {\n                svgChildren = svgRef.current.children as HTMLCollectionOf<SVGGElement>;\n            }\n\n            switch (defaultAlgorithm) {\n                case \"Bubble Sort\":\n                    BubbleSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Selection Sort\":\n                    SelectionSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Insertion Sort\":\n                    InsertionSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Merge Sort\":\n                    MergeSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            // Dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                case \"Quick Sort\":\n                    QuickSort(arrayElements, svgChildren, animationSpeed).then((ele) => {\n                        if (ele) {\n                            dispatch(sortAlgorithm(false));\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [isSorting]);\n\n    return (\n        <div\n            className=\"svg-block\"\n            style={{\n                marginTop: marginTopBottom.current,\n                marginBottom: marginTopBottom.current,\n                marginLeft: marginLeftRight.current,\n                marginRight: marginLeftRight.current\n            }}\n        >\n            <svg\n                key={defaultAlgorithm.toString() + isSorting}\n                ref={svgRef}\n                height=\"100%\"\n                width=\"100%\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                {arrayElements.map((eachElement: number, index: number) => {\n                    const eachElementHeight = (eachElement * height) / maxRange.current;\n\n                    return (\n                        <g\n                            key={\n                                (index * eachElementWidth).toString() +\n                                (height - eachElementHeight).toString()\n                            }\n                            transform={`translate(${index * eachElementWidth} ${\n                                height - eachElementHeight\n                            })`}\n                        >\n                            <rect\n                                height={eachElementHeight}\n                                style={{\n                                    fill: arrayItemOriginalColor,\n                                    stroke: \"pink\",\n                                    strokeOpacity: 0.9,\n                                    strokeWidth: 2\n                                }}\n                                width={eachElementWidth}\n                            />\n                            <text\n                                alignmentBaseline=\"central\"\n                                style={{ fill: \"white\" }}\n                                textAnchor=\"middle\"\n                                x={eachElementWidth / 2}\n                                y={eachElementHeight / 2}\n                            >\n                                {eachElementWidth > 23 ? eachElement : \"\"}\n                            </text>\n                        </g>\n                    );\n                })}\n            </svg>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowSize(): number[] {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n\n    useEffect(() => {\n        function onResize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener(\"resize\", onResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", onResize);\n        };\n    }, []);\n\n    return size;\n}\n","import React, { FunctionComponent } from \"react\";\nimport {\n    arrayItemCurrentPositionColor,\n    arrayItemNotEqualColor,\n    arrayItemEqualColor,\n    arrayItemSortedColor\n} from \"../../commonUtilities\";\n\nexport const Information: FunctionComponent = () => {\n    const Bar: FunctionComponent<{ color: string }> = ({ color }) => (\n        <div style={{ backgroundColor: color, width: \"100px\", height: \"20px\" }} />\n    );\n\n    return (\n        <div className=\"information\">\n            <div className=\"item\">\n                <div>Current Comparision</div>\n                <Bar color={arrayItemCurrentPositionColor} />\n            </div>\n            <div className=\"item\">\n                <div>Incorrect Position</div>\n                <Bar color={arrayItemNotEqualColor} />\n            </div>\n            <div className=\"item\">\n                <div>Correct Position</div>\n                <Bar color={arrayItemEqualColor} />\n            </div>\n            <div className=\"item\">\n                <div>Sorted</div>\n                <Bar color={arrayItemSortedColor} />\n            </div>\n        </div>\n    );\n};\n","import React, { ReactElement } from \"react\";\nimport { Header } from \"./components/Header\";\nimport { ArrayBlocks } from \"./components/ArrayBlocks\";\nimport { Information } from \"./components/Information\";\n\nfunction App(): ReactElement {\n    // Const [isLoading, toggleLoading] = useState(false);\n\n    /*\n     * UseEffect(() => {\n     *     const html = document.querySelector(\"html\");\n     */\n\n    /*\n     *     If (html) {\n     *         let value = \"\";\n     *         const theme = localStorage.getItem(\"theme\");\n     */\n\n    /*\n     *         If (theme === null) {\n     *             value = \"dark\";\n     *             localStorage.setItem(\"theme\", \"dark\");\n     *         } else {\n     *             value = theme;\n     *         }\n     *         html.setAttribute(\"theme\", value);\n     *         toggleLoading(false);\n     *     }\n     * }, []);\n     */\n\n    return (\n        <>\n            <Header />\n            <div className=\"main-blocks\">\n                <Information />\n                <ArrayBlocks key=\"1\" />\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import {\n    CHANGE_DEFAULT_ALGORITHM,\n    GlobalState,\n    GlobalTypes,\n    CHANGE_ARRAY_TYPE,\n    CHANGE_ARRAY_SIZE,\n    CHANGE_ANIMATION_SPEED,\n    SORT_ALGORITHM,\n    PAUSE_EXECUTION\n} from \"../actions/globals/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"Quick Sort\",\n    animationSpeed: 50,\n    arraySize: 50,\n    arrayType: \"Randomize\",\n    sort: false,\n    pause: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_DEFAULT_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_ARRAY_SIZE: {\n            return {\n                ...state,\n                arraySize: action.arraySize\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CHANGE_ARRAY_TYPE: {\n            return {\n                ...state,\n                arrayType: action.arrayType\n            };\n        }\n        case SORT_ALGORITHM: {\n            return {\n                ...state,\n                sort: action.sort\n            };\n        }\n        case PAUSE_EXECUTION: {\n            return {\n                ...state,\n                pause: action.pause\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}