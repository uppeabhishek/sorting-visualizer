{"version":3,"sources":["serviceWorker.ts","Header.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Header","useState","localStorage","getItem","theme","changeThemeState","changeTheme","html","document","querySelector","newTheme","getAttribute","setItem","setAttribute","aria-hidden","className","onClick","App","isLoading","toggleLoading","useEffect","value","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,WCf1BC,EAA4B,WAAO,IAAD,EACTC,mBAASC,aAAaC,QAAQ,UADrB,mBACpCC,EADoC,KAC7BC,EAD6B,KAGrCC,EAAc,WAChB,IAAMC,EAAOC,SAASC,cAAc,QAEpC,GAAIF,EAAM,CACN,IACIG,EAAW,GAGXA,EADqB,SAHAH,EAAKI,aAAa,SAI5B,QAEA,OAEfT,aAAaU,QAAQ,QAASF,GAC9BL,EAAiBK,GACjBH,EAAKM,aAAa,QAASH,KAInC,OACI,gCACI,6BACI,mDAEO,SAAVN,EACG,uBAAGU,cAAY,OAAOC,UAAU,cAAcC,QAASV,IAEvD,uBAAGQ,cAAY,OAAOC,UAAU,eAAeC,QAASV,MCJzDW,MAxBf,WAA8B,IAAD,EACUhB,oBAAS,GADnB,mBAClBiB,EADkB,KACPC,EADO,KAqBzB,OAlBAC,qBAAU,WACN,IAAMb,EAAOC,SAASC,cAAc,QAEpC,GAAIF,EAAM,CACN,IAAIc,EAAQ,GACNjB,EAAQF,aAAaC,QAAQ,SAErB,OAAVC,GACAiB,EAAQ,OACRnB,aAAaU,QAAQ,QAAS,SAE9BS,EAAQjB,EAEZG,EAAKM,aAAa,QAASQ,GAC3BF,GAAc,MAEnB,IAEKD,EAAyB,8BAAb,kBAAC,EAAD,O,iBChBxBI,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJhB,SAASiB,eAAe,SHwHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dee1fc7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React, { FunctionComponent, useState } from \"react\";\n\nexport const Header: FunctionComponent = () => {\n    const [theme, changeThemeState] = useState(localStorage.getItem(\"theme\"));\n\n    const changeTheme = () => {\n        const html = document.querySelector(\"html\");\n\n        if (html) {\n            const currentHTMLtheme = html.getAttribute(\"theme\");\n            let newTheme = \"\";\n\n            if (currentHTMLtheme === \"dark\") {\n                newTheme = \"light\";\n            } else {\n                newTheme = \"dark\";\n            }\n            localStorage.setItem(\"theme\", newTheme);\n            changeThemeState(newTheme);\n            html.setAttribute(\"theme\", newTheme);\n        }\n    };\n\n    return (\n        <header>\n            <div>\n                <h1>Sorting Algorithms</h1>\n            </div>\n            {theme === \"dark\" ? (\n                <i aria-hidden=\"true\" className=\"fa fa-sun-o\" onClick={changeTheme} />\n            ) : (\n                <i aria-hidden=\"true\" className=\"fa fa-moon-o\" onClick={changeTheme} />\n            )}\n        </header>\n    );\n};\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Header } from \"./Header\";\n\nfunction App(): ReactElement {\n    const [isLoading, toggleLoading] = useState(true);\n\n    useEffect(() => {\n        const html = document.querySelector(\"html\");\n\n        if (html) {\n            let value = \"\";\n            const theme = localStorage.getItem(\"theme\");\n\n            if (theme === null) {\n                value = \"dark\";\n                localStorage.setItem(\"theme\", \"dark\");\n            } else {\n                value = theme;\n            }\n            html.setAttribute(\"theme\", value);\n            toggleLoading(false);\n        }\n    }, []);\n\n    return !isLoading ? <Header /> : <div />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}